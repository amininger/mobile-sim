"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class robot_termination_condition_t(object):
    __slots__ = ["utime", "name", "num_params", "param_names", "param_values"]

    def __init__(self):
        self.utime = 0
        self.name = ""
        self.num_params = 0
        self.param_names = []
        self.param_values = []

    def encode(self):
        buf = BytesIO()
        buf.write(robot_termination_condition_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.num_params))
        for i0 in range(self.num_params):
            __param_names_encoded = self.param_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__param_names_encoded)+1))
            buf.write(__param_names_encoded)
            buf.write(b"\0")
        for i0 in range(self.num_params):
            __param_values_encoded = self.param_values[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__param_values_encoded)+1))
            buf.write(__param_values_encoded)
            buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_termination_condition_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_termination_condition_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_termination_condition_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.num_params = struct.unpack(">i", buf.read(4))[0]
        self.param_names = []
        for i0 in range(self.num_params):
            __param_names_len = struct.unpack('>I', buf.read(4))[0]
            self.param_names.append(buf.read(__param_names_len)[:-1].decode('utf-8', 'replace'))
        self.param_values = []
        for i0 in range(self.num_params):
            __param_values_len = struct.unpack('>I', buf.read(4))[0]
            self.param_values.append(buf.read(__param_values_len)[:-1].decode('utf-8', 'replace'))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if robot_termination_condition_t in parents: return 0
        tmphash = (0x5df21747f0eae841) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_termination_condition_t._packed_fingerprint is None:
            robot_termination_condition_t._packed_fingerprint = struct.pack(">Q", robot_termination_condition_t._get_hash_recursive([]))
        return robot_termination_condition_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

