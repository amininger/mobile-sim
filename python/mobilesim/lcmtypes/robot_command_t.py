"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mobilesim.lcmtypes.robot_task_t

class robot_command_t(object):
    __slots__ = ["robotid", "task", "taskid", "ndparams", "dparams", "niparams", "iparams"]

    def __init__(self):
        self.robotid = 0
        self.task = mobilesim.lcmtypes.robot_task_t()
        self.taskid = 0
        self.ndparams = 0
        self.dparams = []
        self.niparams = 0
        self.iparams = []

    def encode(self):
        buf = BytesIO()
        buf.write(robot_command_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.robotid))
        assert self.task._get_packed_fingerprint() == mobilesim.lcmtypes.robot_task_t._get_packed_fingerprint()
        self.task._encode_one(buf)
        buf.write(struct.pack(">bb", self.taskid, self.ndparams))
        buf.write(struct.pack('>%dd' % self.ndparams, *self.dparams[:self.ndparams]))
        buf.write(struct.pack(">b", self.niparams))
        buf.write(struct.pack('>%db' % self.niparams, *self.iparams[:self.niparams]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_command_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_command_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_command_t()
        self.robotid = struct.unpack(">b", buf.read(1))[0]
        self.task = mobilesim.lcmtypes.robot_task_t._decode_one(buf)
        self.taskid, self.ndparams = struct.unpack(">bb", buf.read(2))
        self.dparams = struct.unpack('>%dd' % self.ndparams, buf.read(self.ndparams * 8))
        self.niparams = struct.unpack(">b", buf.read(1))[0]
        self.iparams = struct.unpack('>%db' % self.niparams, buf.read(self.niparams))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if robot_command_t in parents: return 0
        newparents = parents + [robot_command_t]
        tmphash = (0xab3b879956d4b066+ mobilesim.lcmtypes.robot_task_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_command_t._packed_fingerprint is None:
            robot_command_t._packed_fingerprint = struct.pack(">Q", robot_command_t._get_hash_recursive([]))
        return robot_command_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

