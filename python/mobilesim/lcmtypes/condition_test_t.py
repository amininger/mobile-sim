"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mobilesim.lcmtypes.typed_value_t

class condition_test_t(object):
    __slots__ = ["name", "num_params", "param_names", "param_values", "compare_type", "compared_value"]

    CMP_GT = 1
    CMP_GTE = 2
    CMP_EQ = 3
    CMP_LTE = 4
    CMP_LT = 5

    def __init__(self):
        self.name = ""
        self.num_params = 0
        self.param_names = []
        self.param_values = []
        self.compare_type = 0
        self.compared_value = mobilesim.lcmtypes.typed_value_t()

    def encode(self):
        buf = BytesIO()
        buf.write(condition_test_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.num_params))
        for i0 in range(self.num_params):
            __param_names_encoded = self.param_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__param_names_encoded)+1))
            buf.write(__param_names_encoded)
            buf.write(b"\0")
        for i0 in range(self.num_params):
            assert self.param_values[i0]._get_packed_fingerprint() == mobilesim.lcmtypes.typed_value_t._get_packed_fingerprint()
            self.param_values[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.compare_type))
        assert self.compared_value._get_packed_fingerprint() == mobilesim.lcmtypes.typed_value_t._get_packed_fingerprint()
        self.compared_value._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != condition_test_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return condition_test_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = condition_test_t()
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.num_params = struct.unpack(">i", buf.read(4))[0]
        self.param_names = []
        for i0 in range(self.num_params):
            __param_names_len = struct.unpack('>I', buf.read(4))[0]
            self.param_names.append(buf.read(__param_names_len)[:-1].decode('utf-8', 'replace'))
        self.param_values = []
        for i0 in range(self.num_params):
            self.param_values.append(mobilesim.lcmtypes.typed_value_t._decode_one(buf))
        self.compare_type = struct.unpack(">i", buf.read(4))[0]
        self.compared_value = mobilesim.lcmtypes.typed_value_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if condition_test_t in parents: return 0
        newparents = parents + [condition_test_t]
        tmphash = (0x66800932ce76a160+ mobilesim.lcmtypes.typed_value_t._get_hash_recursive(newparents)+ mobilesim.lcmtypes.typed_value_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if condition_test_t._packed_fingerprint is None:
            condition_test_t._packed_fingerprint = struct.pack(">Q", condition_test_t._get_hash_recursive([]))
        return condition_test_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

