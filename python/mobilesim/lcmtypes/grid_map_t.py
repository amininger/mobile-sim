"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class grid_map_t(object):
    __slots__ = ["utime", "encoding", "x0", "y0", "meters_per_pixel", "datalen", "width", "height", "stride", "data"]

    ENCODING_NONE = 0
    ENCODING_GZIP = 1
    ENCODING_ARITH = 2
    ENCODING_TERNARY = 127
    TERNARY_OBSTACLE_MASK = 0x80
    TERNARY_UNKNOWN_MASK = 0x40
    TERNARY_COST_MASK = 0x3F

    def __init__(self):
        self.utime = 0
        self.encoding = 0
        self.x0 = 0.0
        self.y0 = 0.0
        self.meters_per_pixel = 0.0
        self.datalen = 0
        self.width = 0
        self.height = 0
        self.stride = 0
        self.data = ""

    def encode(self):
        buf = BytesIO()
        buf.write(grid_map_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbdddiiii", self.utime, self.encoding, self.x0, self.y0, self.meters_per_pixel, self.datalen, self.width, self.height, self.stride))
        buf.write(bytearray(self.data[:self.datalen]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != grid_map_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return grid_map_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = grid_map_t()
        self.utime, self.encoding, self.x0, self.y0, self.meters_per_pixel, self.datalen, self.width, self.height, self.stride = struct.unpack(">qbdddiiii", buf.read(49))
        self.data = buf.read(self.datalen)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if grid_map_t in parents: return 0
        tmphash = (0x78e5182142328f57) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if grid_map_t._packed_fingerprint is None:
            grid_map_t._packed_fingerprint = struct.pack(">Q", grid_map_t._get_hash_recursive([]))
        return grid_map_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

