sp {learn-failure*name**query*smem
   (state <s> ^name learn-failure
              ^failure-name <name>
              ^smem.command <sc>
              ^topstate.current-game.learning <l>)
   (<l> ^type failure)
-->
   (<sc> ^query <q>)
   (<q> ^failure-name <name>)
}
sp {learn-failure*query*success
   (state <s> ^name learn-failure
              ^failure-name <name>
              ^topstate.current-game.learning.type failure
              ^smem.result.success <cue>
              ^smem.result.retrieved <res>)
-->
   (<s> ^found true
        ^found-failure <res>)
}
sp {learn-failure*query*failure
   (state <s> ^name learn-failure
              ^failure-name <name>
              ^topstate.current-game.learning.type failure
              ^smem.result.failure <cue>)
-->
   (<s> ^found false)
}
sp {learn-failure*propose*copy-failure
   (state <s> ^name learn-failure
              ^failure-name <gname>
              ^found true
              ^topstate.current-game.learning <l>)
   (<l> ^type failure)
-->
   (<s> ^operator <o> + =)
   (<o> ^name copy-failure
        ^category svs) # for now determine better or new category)
}
sp {learn-failure*apply*copy-failure
   (state <s> ^name learn-failure
              ^failure-name <name>
              ^found-failure <go>
              ^topstate <ts>
              ^operator.name copy-failure)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^game <g>)
-->
   (<g> ^failures <go>)
#   (<go> ^conditions <c> ^parameters <p> ^name <name>)
}
sp {copy-failure*propose*finish-failures
   (state <s> ^name copy-failure
              ^topstate.current-game.learning.type failure)
-->
   (<s> ^operator <o> +)
   (<o> ^name finish-failures
        ^category svs)
}


sp {learn-failure*propose*store-failure
   (state <s> ^name learn-failure
              ^failure-name <gname>
              ^found false
             -^topstate.current-game.game.failures
              ^topstate.current-game.learning <l>)
   (<l> ^type failure)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-failure
        ^category svs) # for now determine better or new category)
}

sp {learn-failure*apply*store-failure
   (state <s> ^name learn-failure
              ^failure-name <name>
              ^topstate <ts>
              ^operator.name store-failure)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^game <g>)
-->
   (<g> ^failures <go>)
   (<go> ^conditions <c> ^parameters <p> ^failure-name <name>)
}

sp {learn-failure*propose*find-parameter
   (state <s> ^name learn-failure
              ^topstate.current-game.game.failures
              ^topstate.current-game.learning <l>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-parameter
        ^category svs) # for now determine better or new category)
}

sp {learn-failure*apply*find-parameter
   (state <s> ^name learn-failure
              ^topstate.current-game.game
              ^operator.name find-parameter
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^type <t>)
-->
   (<l> ^type <t> -)
   (<l> ^type parameter ^arg 1)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-parameter
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}


#FINISHED GAME STORE ALL- todo failures
sp {finish-failures*store-game
   (state <s> ^name finish-failures
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^smem.command <sc>
              ^topstate.current-game <cg>)
   (<cg> ^learning <l> ^game <g>)
-->
   (<s> ^stored game)
   (<s> ^to-store <g>)
   (<sc> ^store <g>)
}

sp {finish-failures*propose*store-next-level
   (state <s> ^name finish-failures
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^smem.command <sc>
             -^to-store <something2>
              ^to-store <ts>
              ^topstate.current-game <cg>)
   (<ts> ^<something> <something2>)
   (<something2> ^<s3> <s4>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-game-level
        ^to-store <something2>
        ^category svs) # for now determine better or new category)
}

sp {finish-failures*apply*store-next-level
   (state <s> ^name finish-failures
              ^operator <o>
              ^smem.command <sc>)
   (<o> ^name store-game-level
        ^to-store <something2>)
-->
   (<s> ^to-store <something2>)
   (<sc> ^store <something2>)
}
  	
sp {finish-failures*propose*complete-learn-game
   (state <s> ^name finish-failures
              ^stored game
              ^topstate.current-game <cg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete-learn-game
        ^category svs) # for now determine better or new category)
}

sp {finish-failures*apply*complete-learn-game
   (state <s> ^name finish-failures
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^stored game
              ^operator.name complete-learn-game
              ^topstate <ts>)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^game <g>)
-->
   (<ts> ^current-game <cg> -)
   (<out> ^send-message <msg>)
   (<msg> ^type game-learned
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}
