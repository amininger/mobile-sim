sp {learn-goal*name**query*smem
   (state <s> ^name learn-goal
              ^goal-name <name>
              ^smem.command <sc>
              ^topstate.current-game.learning <l>)
   (<l> ^type goal)
-->
   (<sc> ^query <q>)
   (<q> ^goal-name <name>)
}
sp {learn-goal*query*success
   (state <s> ^name learn-goal
              ^goal-name <name>
              ^topstate.current-game.learning.type goal
              ^smem.result.success <cue>
              ^smem.result.retrieved <res>)
-->
   (<s> ^found true
        ^found-goal <res>)
}
sp {learn-goal*query*failure
   (state <s> ^name learn-goal
              ^goal-name <name>
              ^topstate.current-game.learning.type goal
              ^smem.result.failure <cue>)
-->
   (<s> ^found false)
}
sp {learn-goal*propose*copy-goal
   (state <s> ^name learn-goal
              ^goal-name <gname>
              ^found true
              ^topstate.current-game.learning <l>)
   (<l> ^type goal)
-->
   (<s> ^operator <o> + =)
   (<o> ^name copy-goal
        ^category svs) # for now determine better or new category)
}
sp {learn-goal*apply*copy-goal
   (state <s> ^name learn-goal
              ^goal-name <name>
              ^found-goal <go>
              ^topstate <ts>
              ^operator.name copy-goal)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^game <g>)
-->
   (<g> ^goals <go>)
#   (<go> ^conditions <c> ^parameters <p> ^name <name>)
}
sp {learn-goal*apply*copy-goal*send-message
   (state <s> ^name learn-goal
              ^operator.name copy-goal
              ^topstate.io.output-link <out>
              ^topstate.current-game.game.goals
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^type <t>)
-->
   (<l> ^type <t> -)
   (<l> ^type failure)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-failure
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}

sp {learn-goal*propose*store-goal
   (state <s> ^name learn-goal
              ^goal-name <gname>
              ^found false
             -^topstate.current-game.game.goals
              ^topstate.current-game.learning <l>)
   (<l> ^type goal)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-goal
        ^category svs) # for now determine better or new category)
}

sp {learn-goal*apply*store-goal
   (state <s> ^name learn-goal
              ^goal-name <name>
              ^topstate <ts>
              ^operator.name store-goal)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^game <g>)
-->
   (<g> ^goals <go>)
   (<go> ^conditions <c> ^parameters <p> ^goal-name <name>)
}


sp {learn-goal*propose*find-parameter
   (state <s> ^name learn-goal
              ^topstate.current-game.game.goals
              ^topstate.current-game.learning <l>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-parameter
        ^category svs) # for now determine better or new category)
}

sp {learn-goal*apply*find-parameter
   (state <s> ^name learn-goal
              ^topstate.current-game.game
              ^operator.name find-parameter
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^type <t>)
-->
   (<l> ^type <t> -)
   (<l> ^type parameter ^arg 1)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-parameter
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}

#FINISHED goals
sp {finish-goals*store-game
   (state <s> ^name finish-goals
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game <cg>)
   (<cg> ^learning <l> ^game <g>)
   (<l> ^type <t> ^arg <arg>)
-->
   (<l> ^type <t> -)
   (<l> ^arg <arg> -)
   (<l> ^type failure)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-failure
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}
#FINISHED GAME STORE ALL- todo goals

#sp {finish-goals*store-game
#   (state <s> ^name finish-goals
#              ^topstate.io.output-link <out>
#              ^topstate.status <status>
#              ^smem.command <sc>
#              ^topstate.current-game <cg>)
#   (<cg> ^learning <l> ^game <g>)
#-->
#   (<s> ^stored game)
#   (<s> ^to-store <g>)
#   (<sc> ^store <g>)
#}
#
#sp {finish-goals*propose*store-next-level
#   (state <s> ^name finish-goals
#              ^topstate.io.output-link <out>
#              ^topstate.status <status>
#              ^smem.command <sc>
#             -^to-store <something2>
#              ^to-store <ts>
#              ^topstate.current-game <cg>)
#   (<ts> ^<something> <something2>)
#   (<something2> ^<s3> <s4>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name store-game-level
#        ^to-store <something2>
#        ^category svs) # for now determine better or new category)
#}
#
#sp {finish-goals*apply*store-next-level
#   (state <s> ^name finish-goals
#              ^operator <o>
#              ^smem.command <sc>)
#   (<o> ^name store-game-level
#        ^to-store <something2>)
#-->
#   (<s> ^to-store <something2>)
#   (<sc> ^store <something2>)
#}
#  	
#sp {finish-goals*propose*complete-learn-game
#   (state <s> ^name finish-goals
#              ^stored game
#              ^topstate.current-game <cg>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name complete-learn-game
#        ^category svs) # for now determine better or new category)
#}
#
#sp {finish-goals*apply*complete-learn-game
#   (state <s> ^name finish-goals
#              ^topstate.io.output-link <out>
#              ^topstate.status <status>
#              ^stored game
#              ^operator.name complete-learn-game
#              ^topstate <ts>)
#   (<ts> ^current-game <cg>)
#   (<cg> ^learning <l> ^game <g>)
#-->
#   (<ts> ^current-game <cg> -)
#   (<out> ^send-message <msg>)
#   (<msg> ^type game-learned
#          ^fields <f>)
#   (<status> ^performed.dialog-event.type game)
#}
