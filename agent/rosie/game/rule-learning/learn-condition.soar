sp {learn-condition*propose*store-condition
   (state <s> ^name learn-condition
              ^condition <c>
             -^stored <c>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition ^parameter <type> ^arg <arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-condition
        ^category svs)
}
sp {learn-condition*propose*store-condition*linear
   (state <s> ^name learn-condition
              ^condition1 <c1>
              ^condition2 <c2>
             -^stored <c>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition ^parameter <type> ^arg <arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-condition
        ^category svs)
}
sp {learn-condition*elaborate-interation
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^prep {<prep> <> none}
             -^prep smaller-than
             -^prep linear-with
             -^found-prep.predicate.name <prep>)
-->
   (<l> ^interaction true)
}
sp {learn-condition*elaborate*smaller-linear
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^prep {<prep> << smaller-than linear-with >>})
-->
   (<s> ^found-prep.predicate.name <prep>)
}

sp {learn-condition*propose*lookup-preposition
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^prep {<prep> <> none}
             -^prep smaller-than
             -^prep linear-with
             -^found-prep.predicate.name <prep>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-preposition
        ^interaction true
        ^category svs
        ^type <prep>)
}
#TODO check
sp {learn-condition*apply*lookup-preposition*failure
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^prep {<prep> <> none}
             -^prep smaller-than
             -^prep linear-with
              ^operator.name lookup-preposition
              ^topstate.interaction.status <status>
              ^found-prep <fprep>)
   (<fprep> -^predicate <pre> ^type <prep>)
-->
   (<status> ^failure <f>)
   (<f> ^type index-preposition-failure
        ^preposition <prep>)
}

sp {learn-condition*elaborate-attribute
   (state <s> ^name learn-condition
              ^prep none
              ^condition <cond>
              ^objd <objd>)
   (<objd> ^word object)
-->
   (<objd> ^word <cond>)
}

sp {learn-condition*propose*index-parameter
   (state <s> ^name learn-condition
              ^prep none
              ^condition <cond>
              ^topstate.current-game.learning <l>
             -^found <cond>
              ^objd <objd>)
   (<objd> ^word object ^word <cond>)
-->
   (<s> ^operator <o> + =)
#   (<o> ^name index-object
#        ^use-interaction true
#        ^arg <arg>
#        ^category svs 
#	    ^object <objd>)
   (<o> ^name index-parameter 
        ^parameter <pa>)
   (<pa> ^index-info <ii> ^lexical <objd> ^type object)
   (<ii> ^infer-match false ^return-all false ^use-interaction true)
   (<l> ^interaction true)
}

sp {learn-condition*apply*index-parameter
   (state <s> ^name learn-condition
              ^condition <cond>
              ^operator <o>)
   (<o> ^name index-parameter
        ^parameter.lexical.word <cond>
        ^parameter.result.id <id>)
-->
   (<s> ^found <cond>)
}

sp {learn-condition*apply*store-condition*prep*INDEF
   (state <s> ^name learn-condition
              ^parameter <pname>
              ^topstate <ts>
              ^condition <cond>
              ^negative <val>
              ^spec {<spec> << INDEF DEF >>}
              ^found-prep.predicate.name <prep>
              ^prep {<prep> <> none}
              ^operator.name store-condition)
   (<ts> ^current-game <cg>)
   (<cg> ^name <gname> ^learning <l>)
   (<l> ^arg <arg> ^learn-link <link>)
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <pa>)
   (<c> ^<arg> <conda>)
-->
   (<s> ^stored <cond>)
   (<conda> ^prep <p>)
   (<p> ^name <prep> ^a this ^b INDEF ^negative <val> ^btype <cond>)
}
sp {learn-condition*apply*store-condition*prep*arg
   (state <s> ^name learn-condition
              ^parameter <pname>
              ^topstate <ts>
              ^condition <cond>
              ^negative <val>
              ^spec none
              ^found-prep.predicate.name <prep>
              ^prep {<prep> <> none}
              ^operator.name store-condition)
   (<ts> ^current-game <cg>)
   (<cg> ^name <gname> ^learning <l>)
   (<l> ^arg <arg> ^learn-link <link>)
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <pa>)
   (<c> ^<arg> <conda>)
-->
   (<s> ^stored <cond>)
   (<conda> ^prep <p>)
   (<p> ^name <prep> ^a this ^b <cond> ^negative <val>)# ^btype <cond>)
}
sp {learn-condition*apply*store-condition*prep*arg*linear
   (state <s> ^name learn-condition
              ^parameter <pname>
              ^topstate <ts>
              ^condition1 <cond>
              ^condition2 <cond2>
              ^negative <val>
              ^spec none
              ^found-prep.predicate.name <prep>
              ^prep {<prep> <> none}
              ^operator.name store-condition)
   (<ts> ^current-game <cg>)
   (<cg> ^name <gname> ^learning <l>)
   (<l> ^arg <arg> ^learn-link <link>)
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <pa>)
   (<c> ^<arg> <conda>)
-->
   (<s> ^stored <cond>)
   (<conda> ^prep <p>)
   (<p> ^name <prep> ^a same ^b <cond> ^c <cond2> ^negative <val> ^btype location)#for now only support linear with locations
}



sp {learn-condition*apply*store-condition*attribute
   (state <s> ^name learn-condition
              ^prep none
              ^parameter <pname>
              ^topstate <ts>
              ^found <cond>
              ^condition <cond>
              ^operator.name store-condition)
   (<ts> ^current-game <cg>)
   (<cg> ^name <gname> ^learning <l>)
   (<l> ^arg <arg> ^learn-link <link>)
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <p>)
   (<c> ^<arg> <conda>)
-->
   (<s> ^stored <cond>)
   (<conda> ^attribute <atr>)
   (<atr> ^attr <cond>)
}

sp {learn-condition*propose*find-something
   (state <s> ^name learn-condition
              ^parameter <pname>
              ^<< condition condition1 >> <c>
              ^stored <c>
              ^topstate.current-game.learning <l>)
   (<l> ^learn-link <link> ^arg <arg>)
   (<link> ^conditions.<arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-something
        ^category svs) # for now determine better or new category)
}
sp {learn-condition*apply*find-something*remove-interaction
   (state <s> ^name learn-condition
              ^parameter <pname>
              ^<< condition condition1 >> <c>
              ^stored <c>
              ^operator.name find-something
              ^topstate.io.output-link <out>
              ^topstate.current-game.learning <l>)
   (<l> ^interaction <t> ^arg <arg> ^learn-link <link>)
   (<link> ^conditions.<arg>)
-->
   (<l> ^interaction <t> -)
}

sp {learn-condition*apply*find-something
   (state <s> ^name learn-condition
              ^parameter <pname>
              ^<< condition condition1 >> <c>
              ^stored <c>
              ^operator.name find-something
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^type <t> ^arg <arg> ^learn-link <link>)
   (<link> ^conditions.<arg>)
-->
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-condition
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}


sp {finish-conditions*send-message
   (state <s> ^name finish-conditions
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^type {<cond> << condition >>} ^arg <arg> ^parameter <type>)
-->
   (<l> ^type <cond> -)
   (<l> ^arg <arg> -)
   (<l> ^parameter <type> -)
   (<l> ^type parameter ^arg (+ 1 <arg>))
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-parameter
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}
