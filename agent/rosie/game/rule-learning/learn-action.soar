
sp {learn-action*propose*store-multiplayer
   (state <s> ^name learn-action
              ^multiplayer <word>
             -^topstate.current-game.game.multiplayer <word>
              ^topstate.current-game.learning <l>)
   (<l> ^type mult)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-multiplayer
        ^category svs) # for now determine better or new category)
}
sp {learn-action*apply*store-multiplayer
   (state <s> ^name learn-action
              ^multiplayer <word>
              ^topstate.current-game.game <g>
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type <type>)
   (<o> ^name store-multiplayer
        ^category svs) # for now determine better or new category)
-->
   (<l> ^type <type> -)
   (<l> ^type action)
   (<g> ^multiplayer <word>)
}
sp {learn-action*propose*find-next-action*first
   (state <s> ^name learn-action
              ^multiplayer <word>
              ^topstate.current-game.learning <l>)
   (<l> ^type action)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-next-action
        ^category svs)
}

sp {learn-action*name**query*smem
   (state <s> ^name learn-action
              ^action-name <name>
              ^topstate.current-game.learning <l>
              ^smem.command <sc>)
   (<l> ^type action)
-->
   (<sc> ^query <q>)
   (<q> ^action-name <name>)
}
sp {learn-action*query*success
   (state <s> ^name learn-action
              ^action-name <name>
              ^topstate.current-game.learning.type action
              ^smem.result.success <cue>
              ^smem.result.retrieved <res>)
-->
   (<s> ^found true
        ^found-action <res>)
}
sp {learn-action*query*failure
   (state <s> ^name learn-action
              ^action-name <name>
              ^topstate.current-game.learning.type action
              ^smem.result.failure <cue>)
-->
   (<s> ^found false)
}

sp {learn-action*query*smem
   (state <s> ^name learn-action
              ^verb-name <name>
              ^verb-prep <prep>
              ^topstate.current-game.learning <l>
              ^smem.command <sc>)
   (<l> ^type action)
-->
   (<sc> ^query <q>)
   (<q> ^direct-object <N208> ^pp-object <N207> ^verb <name>)
}
sp {learn-action*query*success*verb
   (state <s> ^name learn-action
              ^verb-name <name>
              ^topstate.current-game.learning.type action
              ^smem.result.success <cue>
              ^smem.result <res>)
-->
   (<s> ^found true)
}
sp {learn-action*query*failure*verb
   (state <s> ^name learn-action
              ^verb-name <name>
              ^topstate.current-game.learning.type action
              ^smem.result.failure <cue>)
-->
   (<s> ^found false)
}




sp {learn-action*propose*teaching-request
   (state <s> ^name learn-action
              ^verb-name <name>
              ^found false
              ^topstate.current-game.learning <l>)
   (<l> ^type action)
-->
   (<l> ^interaction true)
   (<s> ^operator <o> + =)
   (<o> ^name teaching-request
        ^category svs
        ^verb <name>)
}
sp {learn-action*propose*store-action*verb
   (state <s> ^name learn-action
              ^verb-name <name>
              ^found true
             -^topstate.current-game.game.actions.<num>
              ^topstate.current-game.learning <l>)
   (<l> ^type action ^action-number <num> ^action-name <aname>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-action
        ^category svs) # for now determine better or new category)
}

sp {learn-action*propose*store-action
   (state <s> ^name learn-action
              ^action-name <name>
              ^found true
             -^topstate.current-game.game.actions.<num>
              ^topstate.current-game.learning <l>)
   (<l> ^type action ^action-number <num>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-action
        ^category svs) # for now determine better or new category)
}
#TODO multiverbs
sp {learn-action*apply*store-action*verb
   (state <s> ^name learn-action             
              ^verb-name <vname>
              ^verb-prep <prep>
              ^a <p1>
              ^b <p2>
              ^topstate <ts>
              ^operator.name store-action)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^name <gname> ^game <g>)
   (<l> ^action-number <num> ^action-name <aname>)
   (<g> ^actions <a>)
-->
   (<a> ^<num> <act>)
   (<act> ^action-name <aname> ^conditions <c> ^parameters <p> ^verbs <verbs>)
   (<verbs> ^1 <va>)
   (<va> ^verb-name <vname> ^verb-prep <prep> ^1 <p1> ^2 <p2>)	
}

sp {learn-action*apply*store-action
   (state <s> ^name learn-action             
              ^action-name <vname>
              ^found-action <act>
              ^topstate <ts>
              ^operator.name store-action)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^name <gname> ^game <g>)
   (<l> ^action-number <num>)
   (<g> ^actions <a>)
-->
   (<a> ^<num> <act>)
#   (<act> ^action-name <aname> ^conditions <c> ^parameters <p> ^verb <vname> ^verb-prep in) #HACK TODO verb-prep
}

sp {learn-action*propose*find-next-action
   (state <s> ^name learn-action
              ^action-name <name>
              ^found true
              ^topstate.current-game.game.actions.<num>
              ^topstate.current-game.learning <l>)
   (<l> ^action-number <num>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-next-action
        ^category svs)
}
sp {learn-action*apply*find-next-action
   (state <s> ^name learn-action
              ^topstate.interaction.status <status>
              ^topstate.current-game <cg>
              ^operator.name find-next-action
              ^topstate.io.output-link <out>
              ^topstate.current-game.learning <l>)
   (<l> ^action-number <num>)
-->
   (<l> ^action-number <num> -)
   (<l> ^action-number (+ <num> 1))
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-action2
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}

sp {learn-action*propose*find-new-action
   (state <s> ^name learn-action
              ^action-name <name>
              ^found false
              ^topstate.current-game.learning <l>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-new-action
        ^category svs)
}


sp {learn-action*propose*find-parameter*verb
   (state <s> ^name learn-action
              ^verb-name <name>
              ^found true
              ^topstate.current-game.game.actions.<num>
              ^topstate.current-game.learning <l>)
   (<l> ^action-number <num>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-parameter
        ^category svs)
}

sp {learn-action*apply*find-new-action
   (state <s> ^name learn-action
              ^action-name <name>
              ^topstate.current-game.game
              ^operator.name find-new-action
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^type <t>)
-->
   (<l> ^action-name <name>)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-verb
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}

sp {learn-action*apply*find-parameter*remove-interaction
   (state <s> ^name learn-action
              ^verb-name <name>
              ^topstate.current-game.game
              ^operator.name find-parameter
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^interaction <t>)
-->
   (<l> ^interaction <t> -)
} 


sp {learn-action*apply*find-parameter
   (state <s> ^name learn-action
              ^verb-name <name>
              ^topstate.current-game.game
              ^operator.name find-parameter
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^type <t> ^action-name <aname>)
-->
   (<l> ^type <t> -)
   (<l> ^action-name <aname> -)
   (<l> ^type parameter ^arg 1)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-parameter1
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}

#goals
sp {finish-actions*send-message*new-goal
   (state <s> ^name finish-actions
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game <cg>)
   (<cg> ^learning <l> ^game <g>)
   (<l> ^type <t> ^action-number <num>)
-->
   (<l> ^type <t> -)
   (<l> ^action-number <num> -)
   (<l> ^type goal)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-goal
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}
