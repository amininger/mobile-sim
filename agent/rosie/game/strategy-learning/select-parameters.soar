sp {select-parameters*elaborate*operator
   (state <s> ^superstate.name selection
              ^player-args.<num>.action-args.<arg0>.cond-args 6
              ^operator <o>)
   (<o> ^name select-parameters
        ^possible-match-set <pms>
        ^action <arg0>
        ^verbs <verbs>
        ^player-num <num>
        ^arg1 <arga>
        ^arg2 <argb>)
   (<pms> ^{<arg1> 1}.possible-match <obj1>
          ^{<arg2> 2}.possible-match <obj2>
          ^{<arg3> 3}.possible-match <obj3>
          ^{<arg4> 4}.possible-match <obj4>
          ^{<arg5> 5}.possible-match <obj5>
          ^{<arg6> 6}.possible-match <obj6>)
-->
   (<s> ^legal-action <a>
        ^processing wait
        ^played-num <num>
        ^name select-param)
   (<a> ^arg1 <arga>
        ^arg2 <argb>
        ^player-num <num>
        ^verbs <verbs>
        ^action <arg0>
        ^<arg1> <obj1>
        ^<arg2> <obj2>
        ^<arg3> <obj3>
        ^<arg4> <obj4>
        ^<arg5> <obj5>
        ^<arg6> <obj6>)
}
#uncomment for tic-tac-toe action model (avoids svs simulation)
#sp {select-param*tic-tac-rule
#   (state <s> ^superstate.name selection
##              ^superstate.game-name tic-tac-toe
#              ^operator <o>)
##              ^superstate.superstate.relationships <rels>)
#   (<o> ^name select-parameters
#        ^possible-match-set <pms>)
#   (<pms> ^{<arg1> 1}.possible-match <obj1>
#          ^{<arg2> 2}.possible-match <obj2>)
##   (<rels> ^preposition right-of ^relations.obj <obj1> ^with <obj3>) 
## -{(<rels> ^relations.obj {<objx> <> <obj1>})}
#-->
#   (<s> ^action-result <ar>)
#   (<ar> ^item <i>
#         ^relationships <r1>
#         ^relationships <r2>)
#     #    ^relationships <r3>)
#   (<r1> ^preposition below ^relations <r11> ^with <obj2>)
#   (<r11> ^matched true ^name below ^obj <obj1>)
#   (<r2> ^preposition on ^relations <r21> ^with <obj1>)
#   (<r21> ^matched true ^name on ^obj <obj2>)
##   (<r3> ^preposition right-of ^with <obj3>)
#}

sp {select-parameters*elaborate*operator5
   (state <s> ^superstate.name selection
              ^player-args.<num>.action-args.<arg0>.cond-args 5
              ^operator <o>)
   (<o> ^name select-parameters
        ^possible-match-set <pms>
        ^action <arg0>
        ^verbs <verbs>
        ^player-num <num>
        ^arg1 <arga>
        ^arg2 <argb>)
   (<pms> ^{<arg1> 1}.possible-match <obj1>
          ^{<arg2> 2}.possible-match <obj2>
          ^{<arg3> 3}.possible-match <obj3>
          ^{<arg4> 4}.possible-match <obj4>
          ^{<arg5> 5}.possible-match <obj5>)
-->
   (<s> ^legal-action <a>
        ^processing wait
        ^played-num <num>
        ^name select-param)
   (<a> ^arg1 <arga>
        ^arg2 <argb>
        ^player-num <num>
        ^verbs <verbs>
        ^action <arg0>
        ^<arg1> <obj1>
        ^<arg2> <obj2>
        ^<arg3> <obj3>
        ^<arg4> <obj4>
        ^<arg5> <obj5>)
}

sp {select-parameters*elaborate*operator4
   (state <s> ^superstate.name selection
              ^player-args.<num>.action-args.<arg0>.cond-args 4
              ^operator <o>)
   (<o> ^name select-parameters
        ^possible-match-set <pms>
        ^action <arg0>
        ^verbs <verbs>
        ^player-num <num>
        ^arg1 <arga>
        ^arg2 <argb>)
   (<pms> ^{<arg1> 1}.possible-match <obj1>
          ^{<arg2> 2}.possible-match <obj2>
          ^{<arg3> 3}.possible-match <obj3>
          ^{<arg4> 4}.possible-match <obj4>)
-->
   (<s> ^legal-action <a>
        ^processing wait
        ^played-num <num>
        ^name select-param)
   (<a> ^arg1 <arga>
        ^arg2 <argb>
        ^player-num <num>
        ^verbs <verbs>
        ^action <arg0>
        ^<arg1> <obj1>
        ^<arg2> <obj2>
        ^<arg3> <obj3>
        ^<arg4> <obj4>)
}

sp {select-parameters*elaborate*operator2
   (state <s> ^superstate.name selection
              ^player-args.<num>.action-args.<arg0>.cond-args 2
              ^operator <o>)
   (<o> ^name select-parameters
        ^possible-match-set <pms>
        ^action <arg0>
        ^verbs <verbs>
        ^player-num <num>
        ^arg1 <arga>
        ^arg2 <argb>)
   (<pms> ^{<arg1> 1}.possible-match <obj1>
          ^{<arg2> 2}.possible-match <obj2>)
-->
   (<s> ^legal-action <a>
        ^processing wait
        ^played-num <num>
        ^name select-param)
   (<a> ^arg1 <arga>
        ^arg2 <argb>
        ^player-num <num>
        ^action <arg0>
        ^verbs <verbs>
        ^<arg1> <obj1>
        ^<arg2> <obj2>)
}
sp {select-parameters*elaborate*operator3
   (state <s> ^superstate.name selection
              ^player-args.<num>.action-args.<arg0>.cond-args 3
              ^operator <o>)
   (<o> ^name select-parameters 
        ^possible-match-set <pms>
        ^action <arg0>
        ^verbs <verbs>
        ^player-num <num>
        ^arg1 <arga>
        ^arg2 <argb>)
   (<pms> ^{<arg1> 1}.possible-match <obj1>
          ^{<arg2> 2}.possible-match <obj2>
          ^{<arg3> 3}.possible-match <obj3>)
-->
   (<s> ^legal-action <a>
        ^processing wait
        ^played-num <num>
        ^name select-param)
   (<a> ^arg1 <arga>
        ^arg2 <argb>
        ^player-num <num>
        ^verbs <verbs>
        ^action <arg0>
        ^<arg1> <obj1>
        ^<arg2> <obj2>
        ^<arg3> <obj3>)
}

sp {select-parameters*elaborate*pop-up-bestfound
#   :interrupt
   (state <s> ^superstate.name selection
              ^legal-action
             -^dcount 0
             -^multiplayer true
              ^desired <d>
              ^operator <o>)
   (<o> ^name select-parameters
       -^duplicate-of)
-->
   (<s> ^success <d>)
}
sp {select-parameters*elaborate*pop-up-bestfoundmulti
#   :interrupt
   (state <s> ^superstate.name selection
              ^legal-action
             -^dcount 0
              ^multiplayer true
              ^desired <d>
              ^operator <o>)
   (<o> ^name select-parameters
        ^valcue <vc>
       -^duplicate-of)
-->
   (<s> ^val-count (* <vc> -1))
}

sp {select-parameters*elaborate*pop-up-bestfound*copytotop
#   :interrupt
   (state <s> ^superstate.name selection
              ^legal-action
              ^topstate <ts>
             -^dcount 0
              ^dcount <dc>
             -^multiplayer true
              ^operator <o>)
   (<o> ^name select-parameters 
        ^possible-match-set <pms>
        ^verbs <verbs>
       -^duplicate-of)
   (<verbs> ^<varg> <verb>)
   (<verb> ^{<a1> 1} <arg1> ^{<a2> 2} <arg2> ^verb-prep <pname>)
   (<pms> ^<arg1>.possible-match <oa> ^<arg2>.possible-match <ob>)
-->
   (<ts> ^flound-action <fa>)
   (<fa> ^dcount (+ (* <dc> 4) <varg>) ^obj1 <oa> ^obj2 <ob> ^pname <pname>)
}

sp {select-param*propose*simulate-action
   (state <s> ^name select-param
              ^legal-action <item>
             -^rels-copied
              ^action-result <ar>)
   (<ar> ^item <i> -^tried)
-->
   (<s> ^operator <o> + =)
   (<o> ^name simulate-action
        ^item <item>
        ^result <ar>
        ^category svs)
}

sp {select-param*apply*simulate-action*find-changed
   (state <s> ^name select-param
              ^operator <o>)
   (<o> ^name simulate-action
        ^item <item>
        ^result <ar>)
   (<ar> ^relationships <rels>)
   (<rels> ^with <id> ^preposition <prep>)
   (<s> ^relationships <rels2>)
   (<rels2> ^with <id> ^preposition <prep>)
   (<rels> -^relations.obj <id2>)
   (<rels2> ^relations.obj <id2>)
-->
   (<rels> ^changed true)
}

sp {select-param*apply*simulate-action*find-changed2
   (state <s> ^name select-param
              ^operator <o>)
   (<o> ^name simulate-action
        ^item <item>
        ^result <ar>)
   (<ar> ^relationships <rels>)
   (<rels> ^with <id> ^preposition <prep>)
   (<s> ^relationships <rels2>)
   (<rels2> ^with <id> ^preposition <prep>)
   (<rels> ^relations.obj <id2>)
   (<rels2> -^relations.obj <id2>)
-->
   (<rels> ^changed true)
}

sp {select-param*apply*simulate-action
   (state <s> ^name select-param
              ^operator <o>)
   (<o> ^name simulate-action
        ^item <item>
        ^result <ar>)
   (<ar> ^relationships <rels> -^relationships <rels2>)
   (<rels> ^with <id> ^preposition <prep> ^changed)
   (<s> ^relationships <rels2>)
   (<rels2> ^with <id> ^preposition <prep>)
-->
   (<s> ^simulated true
        ^rels-copied true)
   (<s> ^relationships <rels2> -)
   (<s> ^relationships <rels>)
}

sp {select-param*apply*simulate-action*remove-stale-partials
   (state <s> ^name select-param
              ^operator <o>
#              ^played-num <num>
              ^player-args.{<num> << 1 2 >>}.<< goal-args failure-args action-args >>.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>)
   (<o> ^name simulate-action
        ^item <item>
        ^result <ar>)  
   (<ar> ^relationships <rels>)
   (<rels> ^with <id> ^preposition <prep> ^changed true)
   (<act> ^found-possible <fp>)
   (<fp> ^prep.name <prep> ^objid <id>)
-->
   (<act> ^found-possible <fp> -)
}

sp {select-param*propose*constraint-match*failureargs
   (state <s> ^name select-param
              ^simulated true
             -^matches-found.failure
              ^played-num <num>
              ^player-args.<num>.failure-args <fa>)
-->
   (<s> ^operator <o> +)
   (<o> ^name constraint-match
        ^param-args <fa>)
}

sp {select-param*apply*constraint-match*failure
   (state <s> ^name select-param
              ^matches-found.failure true
              ^simulated true
              ^desired <d>)
-->
   (<s> ^partial-failure <d>)
}


sp {select-param*propose*constraint-match*goal-args
   (state <s> ^name select-param
              ^simulated true
              ^depth-limit <dc>
              ^dcount <dc>
             -^matches-found.goal
             -^multiplayer true
              ^matches-found.failure false
              ^played-num <num>
              ^player-args.<num>.goal-args <ga>)
-->
   (<s> ^operator <o> +)
   (<o> ^name constraint-match
        ^param-args <ga>)
}

sp {select-param*propose*constraint-match*goal-args*multiplayer
   (state <s> ^name select-param
              ^simulated true
              ^depth-limit <dc>
              ^multiplayer true
              ^dcount <dc>
             -^matches-found.num <num>
              ^matches-found.failure false
              ^player-args.{<num> << 1 2 >>}.goal-args <ga>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name constraint-match
        ^num-arg <num>
        ^param-args <ga>)
}

sp {select-param*propose*constraint-match*goal-args*multiplayer*firstmove
   (state <s> ^name select-param
              ^simulated true
              ^multiplayer true
              ^dcount 1
             -^matches-found.num <num>
              ^matches-found.failure false
              ^player-args.{<num> << 1 >>}.goal-args <ga>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name constraint-match
        ^num-arg <num>
        ^param-args <ga>)
}

sp {select-param*apply*constraint-match*goal-args
#   :interrupt
   (state <s> ^name select-param
              ^matches-found.goal true
             -^multiplayer true 
              ^simulated true
              ^desired <d>)
-->
   (<s> ^success <d>)
}

sp {select-param*propose*complete-matches*nogoal
   (state <s> ^name select-param
              ^simulated true
              ^depth-limit {<dl> <> <dc>}
              ^dcount <dc>
              ^matches-found.failure false)
-->
   (<s> ^operator <o> +)
   (<o> ^name complete-matches)
}
   
sp {select-param*propose*complete-matches
   (state <s> ^name select-param
              ^matches-found.goal false
              ^processing true
              ^simulated true)
-->
   (<s> ^operator <o> +)
   (<o> ^name complete-matches)
}
sp {select-param*apply*complete-matches
   (state <s> ^name select-param
              ^action-result <ar>
              ^simulated true
              ^processing <p>
              ^operator <o>)
   (<o> ^name complete-matches)
-->
   (<s> ^processing <p> -)
   (<ar> ^tried true)
}
sp {select-param*apply*complete-matches*sim
   (state <s> ^name select-param
              ^simulated <sim>
#              -^multiplayer true
              ^operator <o>)
   (<o> ^name complete-matches)
-->
   (<s> ^simulated <sim> -)
}