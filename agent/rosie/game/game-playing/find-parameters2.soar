sp {find-parameters*elaborate*copy-down-attrs
   (state <s> ^name find-parameters
              ^superstate.operator <o>)
   (<o> ^game-name <name>)
-->
   (<s> ^desired <d> ^game-name <name> ^failure-args <fa> ^goal-args <ga> ^depth-limit 3 ^dcount 0)
   (<d> ^found true)
}


#####################impasse
sp {find-parameters*impasse*elaborate
   (state <s> ^superstate.name find-parameters
             -^superstate.name evaluate-operator
             -^superstate.valid-arg
             -^superstate.actions
              ^impasse no-change)
-->
 #  (interrupt)
   (force-learn <s>)
   (<s> ^name find-parameters-impasse)
}

#######################
sp {find-parameters-impasse*propose*lookup-game
   (state <s> ^name find-parameters-impasse
              ^superstate <ss>)
   (<ss> ^game-name <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-game
        ^category svs # for now determine better or new category
        ^game-name <name>)
}

sp {find-parameters-impasse*elaborate*conditions-parameters
   (state <s> ^name find-parameters-impasse
              ^game <g>
              ^superstate <ss>)
   (<ss> ^game-name <name>)
   (<g> ^game-name <name> ^actions <a> ^goals <go> ^failures <f>)
   (<go> ^goal-cond-args <ga>)
   (<f> ^failure-cond-args <fa>)
-->
   (<ss> ^actions <a> ^failures <f> ^goals <go> ^goal-cond-args <ga> ^failure-cond-args <fa>)
}
sp {find-parameters-impasse*elaborate*conditions-parameters*multiplayer
   (state <s> ^name find-parameters-impasse
              ^game <g>
              ^superstate <ss>)
   (<ss> ^game-name <name>)
   (<g> ^game-name <name> ^actions <a> ^goals <go> ^failures <f> ^multiplayer <m>)
   (<go> ^goal-cond-args <ga>)
   (<f> ^failure-cond-args <fa>)
-->
   (<ss> ^multiplayer <m>)
}

sp {find-parameters*elaborate*all-actions
   (state <s> ^name find-parameters
              ^dcount 0
              ^actions <a>)
   (<a> ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <act>)
   (<act> ^conditions <c> ^parameters <p> ^cond-args <ca> ^verbs <va>)
-->
   (<s> ^<arg> <b>)
   (<b> ^conds <c> ^params <p> ^verbs <va> ^cond-args <ca>)
}

#######################################
sp {find-parameters*elaborate*object-desc
   (state <s> ^name find-parameters
              ^dcount 0
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^objd <objd>
        ^cond <conda>)
   (<conda> ^attribute.<type> <atr>)
-->
   (<objd> ^word <atr>)
}

sp {find-parameters*elaborate*args
   (state <s> ^name find-parameters
              ^dcount 0
              ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <act>)
   (<act> ^conds <c> ^params <p>)
   (<p> ^{<arg2> << 1 2 3 4 5 6 7 8 9 10 >>} <p1>)
   (<p1> ^type <param> -^both true)
#   (<p> ^<arg2>.{<param> <> type} <pa> ^<arg2>.type.world.object <atr>)
   (<c> ^<arg2> <conda>)
-->
   (<act> ^<arg2> <a>)
   (<a> ^objd <objd>
        ^cond <conda>
        ^param <param>)
   (<objd> ^word object)
}

sp {find-parameters*elaborate*args2
   (state <s> ^name find-parameters
              ^dcount 0
              ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <act>)
   (<act> ^conds <c> ^params <p>)
   (<p> ^{<arg2> << 1 2 3 4 5 6 7 8 9 10 >>} <p1>)
   (<p1> ^type {<param> << location >> } ^both true ^type {<param2> <> <param>})
#   (<p> ^<arg2>.{<param> <> type} <pa> ^<arg2>.type.world.object <atr>)
   (<c> ^<arg2> <conda>)
-->
   (<act> ^<arg2> <a>)
   (<a> ^objd <objd>
        ^cond <conda>
        ^param <param2>
        ^param <param>)
   (<objd> ^word object)
}

sp {find-parameters*propose*index-parameter
   (state <s> ^name find-parameters
              ^dcount 0
             -^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.obj <objs>
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.objd <objd>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name index-parameter 
        ^parameter <pa>)
   (<pa> ^index-info <ii> ^lexical <objd> ^type object)
   (<ii> ^infer-match false ^return-all true ^use-interaction false)
}
#   (<s> ^operator <o> + =)
#   (<o> ^name index-object
#        ^return-all true
#        ^object-param <p>
#        ^arg <arg>)
#   (<p> ^type object
#        ^lexical <objd>
#        ^index-info <ii>)
#   (<ii> ^return-all true
#         ^use-interaction false
#         ^infer-match false)
#}

sp {find-parameters*apply*index-parameter
   (state <s> ^name find-parameters
              ^operator <o>
              ^dcount 0
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^topstate.object <obj>)
   (<a> ^param <param> ^objd <objd> -^obj <obj>)
   (<o> ^name index-parameter
        ^parameter.lexical <objd2>
        ^parameter.result.id <id>)
   (<obj> ^id <id> ^category <param>)
 -{(<objd2> ^word <word>)
   (<objd> -^word <word>)}
 -{(<objd2> -^word <word2>)
   (<objd> ^word <word2>)}
-->
   (<a> ^obj <obj>)
}

sp {find-parameters*propose*lookup-preposition
   (state <s> ^name find-parameters
             -^processing wait
             -^found-prep.type <name>
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.cond <conda>)
   (<conda> ^prep <prep>)
   (<prep> ^name <name> ^a this
          -^name << smaller-than linear-with >>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-preposition
        ^category svs
        ^type <name>)
}
sp {find-parameters*propose*lookup-preposition*verb
   (state <s> ^name find-parameters
             -^processing wait
             -^found-prep.type <name>
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.verbs.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.verb-prep <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-preposition
        ^category svs
        ^type <name>)
}

#######use find-all
sp {find-parameters*propose*find-relations
   (state <s> ^name find-parameters
              ^svs <svs>
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^found-prep <fprep>)
   (<a> ^obj <obj> ^cond <cond>)
   (<fprep> ^type <name>)
   (<cond> ^prep <prep>)
   (<obj> ^id <id>)
   (<prep> ^name <name> ^a this
          -^name << smaller-than linear-with >>)
 -{(<s> ^relationships <rels>)
   (<rels> ^with <id> ^preposition <name>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-relations
        ^category svs
        ^obj <id>
        ^ind 1
#        ^svs-link <svs>
        ^found-prep <fprep>
        ^prep <name>) 
}

sp {find-parameters*propose*find-relations*smaller-than
   (state <s> ^name find-parameters
              ^svs <svs>
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^obj <obj> ^cond <cond>)
   (<cond> ^prep <prep>)
   (<obj> ^id <id>)
   (<prep> ^name {<name> << smaller-than linear-with >>})
 -{(<s> ^relationships <rels>)
   (<rels> ^with <id> ^preposition <name>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-relations
        ^category svs
#        ^svs-link <svs>
        ^obj <id>
        ^ind 1
        ^prep <name>) 
}

#############################################
#LEGAL ACTION DETECTION!!!
sp {find-parameters*check-relation*positive-one*propose*found-possible-prep-match*INDEF
   (state <s> ^name find-parameters
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              -^processing wait
              ^relationships <rels>
              ^topstate.object <tobj>)
   (<a> ^obj <obj> ^cond <conda>)
   (<rels> ^with <id> ^preposition <name> ^relations <r>)
   (<r> ^matched true ^obj <obj-id>)
   (<conda> ^prep <prep>)
   (<obj> ^id <id>)
   (<tobj> ^id <obj-id> ^category <btype>)
   (<prep> ^name <name> ^a this ^b INDEF ^negative false ^btype <btype>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
 -{(<act> ^found-possible <fp>)
   (<fp> ^prep.name <name> ^objid <id> ^arg <arg> ^withid none ^arg2 INDEF)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid none
        ^arg2 INDEF
        ^neg false
        ^prep <prep>
        ^action <arg0>
        ^category svs) 
}

sp {find-parameters*negative-all*propose*found-possible-prep-match*INDEF
   (state <s> ^name find-parameters
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              -^processing wait
              ^relationships <rels>)
   (<a> ^obj <obj> ^cond <conda>)
   (<rels> ^with <id> ^preposition <name>)
   (<conda> ^prep <prep>)
   (<obj> ^id <id>)
   (<prep> ^name <name> ^a this ^b INDEF ^negative true ^btype <btype>)
 -{(<rels> ^relations <r>)
   (<r> ^matched true ^obj <obj-id>)
   (<s> ^topstate.object <o1>)
   (<o1> ^id <obj-id> ^category <btype>)}
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
 -{(<act> ^found-possible <fp>)
   (<fp> ^prep.name <name> ^objid <id> ^arg <arg> ^withid none ^arg2 INDEF)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid none
        ^arg2 INDEF
        ^action <arg0>
        ^neg true
        ^prep <prep>
        ^category svs) 
}

sp {find-parameters*check-relation*positive-one*propose*found-possible-prep-match*arg
   (state <s> ^name find-parameters
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              -^processing wait
              ^relationships <rels>
              ^topstate.object <tobj>)
   (<a> ^obj <obj> ^cond <conda>)
   (<rels> ^with <id> ^preposition <name> ^relations <r>)
   (<r> ^matched true ^obj <obj-id>)
   (<conda> ^prep <prep>)
   (<obj> ^id <id>)
   (<tobj> ^id <obj-id> ^category <btype>)
   (<prep> ^name <name> ^a this ^b {<arg2> <> INDEF} ^negative <bool> ^btype <btype>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
 -{(<act> ^found-possible <fp>)
   (<fp> ^prep.name <name> ^objid <id> ^arg <arg> ^withid <obj-id> ^arg2 <arg2>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid <obj-id>
        ^arg2 <arg2>
        ^action <arg0>
        ^neg <bool>
        ^prep <prep>
        ^category svs)
}
#could possibly reduce by name
sp {find-parameters*check-relation*positive-one*propose*found-possible-prep-match*arg*3arg
   (state <s> ^name find-parameters
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              -^processing wait
              ^relationships <rels>
              ^topstate.object <tobj2>
              ^topstate.object <tobj>)
   (<a> ^obj <obj> ^cond <conda>)
   (<rels> ^with <id> ^preposition <name> ^relations <r>)
   (<r> ^matched true ^obj1 <obj2> ^obj2 {<obj3> <> <obj2>})
   (<conda> ^prep <prep>)
   (<obj> ^id <id>)
   (<tobj> ^id <obj2> ^category <btype>)
   (<tobj2> ^id <obj3> ^category <btype>)
   (<prep> ^name <name> ^a same ^b <arg2> ^c <arg3> ^negative <bool> ^btype <btype>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
 -{(<act> ^found-possible <fp>)
   (<fp> ^prep.name <name> ^objid <id> ^arg <arg> ^withid2 <obj2> ^withid3 <obj3> ^arg2 <arg2> ^arg3 <arg3>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid2 <obj2>
        ^withid3 <obj3>
        ^arg2 <arg2>
        ^arg3 <arg3>
        ^action <arg0>
        ^neg <bool>
        ^prep <prep>
        ^category svs)
}

#sp {find-parameters*check-relation*negative-one*propose*found-possible-prep-match*arg
#   (state <s> ^name find-parameters
#              ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
#              -^processing wait
#              ^relationships <rels>
#              ^object <tobj>)
#   (<a> ^obj <obj> ^cond <conda> ^atr <atr>)
#   (<rels> ^with <id> ^preposition <name> -^relations.obj <obj-id>)
##   (<r> ^matched true ^obj <obj-id>)
#   (<conda> ^prep <prep>)
#   (<obj> ^id <id>)
#   (<tobj> ^id <obj-id> ^<atr> <btype>)
#   (<prep> ^name <name> ^a this ^b {<arg2> <> INDEF} ^negative true ^btype <btype>)
# -{(<s> ^found-possible <fp>)
#   (<fp> ^prep <prep> ^objid <id> ^arg <arg> ^withid <obj-id> ^arg2 <arg2> ^neg true)}
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name found-possible-prep-match
#        ^objid <id>
#        ^arg <arg>
#        ^withid <obj-id>
#        ^arg2 <arg2>
#        ^neg true
#        ^prep <prep>
#        ^category svs)
#}

sp {find-parameters*check-relation*apply*found-possible-prep-match
   (state <s> ^name find-parameters
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^operator <o>)
   (<a> ^obj.id <id> )#^cond.prep <p>)
#   (<p> ^name <prep> ^b <arg2>)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid <with>
        ^neg <neg>
        ^arg2 <arg2>
        ^action <arg0>
        ^prep <prep>)
-->
   (<act> ^found-possible <fp>)
   (<fp> ^prep <prep> ^objid <id> ^arg <arg> ^withid <with> ^arg2 <arg2> ^neg <neg>)
}

sp {find-parameters*check-relation*apply*found-possible-prep-match*3arg
   (state <s> ^name find-parameters
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^operator <o>)
   (<a> ^obj.id <id>)# ^cond.prep <p>)
#   (<p> ^name <prep> ^b <arg2> ^c <arg3>)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid2 <obj2>
        ^withid3 <obj3>
        ^neg <neg>
        ^arg2 <arg2>
        ^arg3 <arg3>
        ^action <arg0>
        ^prep <prep>)
-->
   (<act> ^found-possible <fp>)
   (<fp> ^prep <prep> ^objid <id> ^arg <arg> ^withid2 <obj2> ^withid3 <obj3> ^arg3 <arg3> ^arg2 <arg2> ^neg <neg>)
}
#TODO enable work with args

sp {find-parameters*propose*test-action
   (state <s> ^name find-parameters
             -^test-action
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.cond
             -^processing wait)
-->
#   (interrupt)
   (<s> ^operator <o> + =)
   (<o> ^name test-action
        ^category svs)
}

sp {find-parameters*apply*test-action
   (state <s> ^name find-parameters
              ^operator.name test-action)
-->
#   (interrupt)
   (<s> ^test-action true)
}

#TODO rethink could be much better
#NEXT SLOWER DOWN THING
sp {find-parameters*check-relation*elaborate*found-possible-arg-match
   (state <s> ^name find-parameters
              ^operator.name test-action
            #  ^test-action true
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
    -{(<s> ^dcount <dc> ^depth-limit <dc>)}
   (<a> ^obj.id <id> -^cond.type indiff)
   -{(<a> ^cond.prep <prep>) #has matches for all of its conditions
     (<prep> ^name <name> ^a this ^b <arg2> ^negative false)
     -{(<act> ^found-possible <fop>)
     (<fop> ^arg <arg> ^arg2 <arg2> ^objid <id> ^prep.name <name>)}}
  -{(<a> ^cond.prep <prep>)
     (<prep> ^name <name> ^a this ^b {<arg2> INDEF} ^negative true)
     -{(<act> ^found-possible <fop>)
     (<fop> ^arg <arg> ^arg2 <arg2> ^objid <id> ^prep.name <name> ^neg true)}}
  -{(<act> ^{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>}.cond.prep <p>)
     (<p> ^name <n> ^b <arg> ^a this ^negative false)
    -{(<act> ^found-possible <fp2>)
      (<fp2> ^prep.name <n> ^arg <arg3> ^arg2 <arg> ^withid <id>)}}
# -{(<act> ^{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>}.cond.prep <p>)
#     (<p> ^name <n> ^b <arg> ^c <something> ^negative false)
#    -{(<act> ^found-possible <fp2>)
#      (<fp2> ^prep.name <n> ^arg <arg3> ^arg2 <arg> ^withid2 <id>)}}
   -{(<a> ^cond.prep <prep>)
     (<prep> ^name <name2> ^b <arg2a> ^c <arg3a>)
     -{(<act> ^found-possible <fop>)
     (<fop> ^arg <arg> ^arg2 <arg2a> ^arg3 <arg3a> ^objid <id> ^prep.name <name2>)}}
#TODO add checks for part c, should be able to make b case for both by changing to withid instead of withid2
-->
#   (interrupt)
   (<a> ^possible-match <pm>)
   (<pm> ^id <id>)
}
sp {find-parameters*check-relation*elaborate*found-possible-arg-match*indiff
   (state <s> ^name find-parameters
              ^operator.name test-action
            #  ^test-action true
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
    -{(<s> ^dcount <dc> ^depth-limit <dc>)}
   (<a> ^obj.id <id> ^cond.type indiff)
   -{(<a> ^cond.prep <prep>) #has matches for all of its conditions
     (<prep> ^name <name> ^a this ^b <arg2> ^negative false)
     -{(<act> ^found-possible <fop>)
     (<fop> ^arg <arg> ^arg2 <arg2> ^objid <id> ^prep.name <name>)}}
  -{(<a> ^cond.prep <prep>)
     (<prep> ^name <name> ^a this ^b {<arg2> INDEF} ^negative true)
     -{(<act> ^found-possible <fop>)
     (<fop> ^arg <arg> ^arg2 <arg2> ^objid <id> ^prep.name <name>)}}
  -{(<act> ^{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>}.cond.prep <p>)
     (<p> ^name <n> ^b <arg> -^c ^negative false)
    -{(<act> ^found-possible <fp2>)
      (<fp2> ^prep.name <n> ^arg <arg3> ^arg2 <arg> ^withid <id>)}}
# -{(<act> ^{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>}.cond.prep <p>) #HUH check again?
#     (<p> ^name <n> ^b <arg> ^c <something> ^negative false)
#    -{(<act> ^found-possible <fp2>)
#      (<fp2> ^prep.name <n> ^arg <arg3> ^arg2 <arg> ^withid2 <id>)}}
   -{(<a> ^cond.prep <prep>)
     (<prep> ^name <name> ^b <arg2> ^c <arg3>)
     -{(<act> ^found-possible <fop>)
     (<fop> ^arg <arg> ^arg2 <arg2> ^arg3 <arg3> ^objid <id> ^prep.name <name>)}}
#TODO add checks for part c, should be able to make b case for both by changing to withid instead of withid2
-->
   (<a> ^possible-match <pm>)
   (<pm> ^id <id> ^type indiff)
}
#OTHER HUGE SLOWER DOWN TODO
sp {find-parameters*check-relation*elaborate*possible-match*conditions
   (state <s> ^name find-parameters
              #^test-action true
              ^operator.name test-action2
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<act> ^found-possible <fp>)
   (<a> ^possible-match <pm>)
   (<pm> ^id <id>)
   (<fp> ^arg <arg> ^arg2 {<arg2> <> INDEF} ^withid <id2> ^objid <id> -^neg true)
 -{(<act> ^found-possible <fp2>)
   (<fp2> ^arg <arg> ^arg2 <arg2> ^withid <id2> ^objid <id> ^neg true)}
-->
   (<pm> ^<arg2> <id2> ^has <arg2>)
}
sp {find-parameters*check-relation*elaborate*possible-match*conditions2
   (state <s> ^name find-parameters
              #^test-action true
              ^operator.name test-action2
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<act> ^found-possible <fp>)
   (<a> ^possible-match <pm>)
   (<pm> ^id <id>)
   (<fp> ^arg <arg> ^arg2 {<arg2> <> INDEF} ^withid2 <id2> ^objid <id> -^neg true)
 -{(<act> ^found-possible <fp2>)
   (<fp2> ^arg <arg> ^arg2 <arg2> ^withid2 <id2> ^objid <id> ^neg true)}
 -{(<act> ^found-possible <fp3>)
   (<fp3> ^arg <arg> ^arg2 <arg2> ^withid <id2> ^objid <id> ^neg true)}
 -{(<act> ^found-possible <fp4>)
   (<fp4> ^arg <arg> ^arg2 <arg2> ^withid3 <id2> ^objid <id> ^neg true)}
-->
   (<pm> ^<arg2> <id2> ^has <arg2>)
}
sp {find-parameters*check-relation*elaborate*possible-match*conditions3
   (state <s> ^name find-parameters
              #^test-action true
              ^operator.name test-action2
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<act> ^found-possible <fp>)
   (<a> ^possible-match <pm>)
   (<pm> ^id <id>)
   (<fp> ^arg <arg> ^arg3 {<arg2> <> INDEF} ^withid3 <id2> ^objid <id> -^neg true)
 -{(<act> ^found-possible <fp2>)
   (<fp2> ^arg <arg> ^arg3 <arg2> ^withid3 <id2> ^objid <id> ^neg true)}
 -{(<act> ^found-possible <fp3>)
   (<fp3> ^arg <arg> ^arg3 <arg2> ^withid <id2> ^objid <id> ^neg true)}
 -{(<act> ^found-possible <fp4>)
   (<fp4> ^arg <arg> ^arg3 <arg2> ^withid3 <id2> ^objid <id> ^neg true)}
-->
   (<pm> ^<arg2> <id2> ^has <arg2>)
}
#sp {find-parameters*check-relation*elaborate*possible-match*conditions2to3
#   (state <s> ^name find-parameters
#              ^test-action true
#              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
#              ^<arg0>.{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>} <b>
#              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} {<a> <> <b>})
#   (<act> ^found-possible <fp>)
#   (<a> ^possible-match <pm>)
#   (<pm> ^id <id>)
#   (<fp> ^arg <arg3> ^arg2 <arg> ^arg3 {<arg2> <> INDEF} ^withid3 <id2> ^withid2 <id> -^neg true)
# -{(<act> ^found-possible <fp2>)
#   (<fp2> ^arg <arg3> ^arg2 <arg> ^arg3 <arg2> ^withid3 <id2> ^withid2 <id> ^neg true)}
#-->
#   (<pm> ^<arg2> <id2> ^has <arg2>)
#}
#sp {find-parameters*check-relation*elaborate*possible-match*conditions3to2
#   (state <s> ^name find-parameters
#              ^test-action true
#              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
#              ^<arg0>.{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>} <b>
#              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} {<a> <> <b>})
#   (<act> ^found-possible <fp>)
#   (<a> ^possible-match <pm>)
#   (<pm> ^id <id>)
#   (<fp> ^arg <arg3> ^arg3 <arg> ^arg2 {<arg2> <> INDEF} ^withid2 <id2> ^withid3 <id> -^neg true)
# -{(<act> ^found-possible <fp2>)
#   (<fp2> ^arg <arg3> ^arg3 <arg> ^arg2 <arg2> ^withid2 <id2> ^withid3 <id> ^neg true)}
#-->
#   (<pm> ^<arg2> <id2> ^has <arg2>)
#}
sp {find-parameters*check-relation*elaborate*possible-match*conditions*none
   (state <s> ^name find-parameters
              #^test-action true
              ^operator.name test-action2
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>} <b>
#              -^<arg0>.{<arg4> << 1 2 3 4 5 6 7 8 9 10 >>} <c>
#              -^<arg0>.{<arg5> << 1 2 3 4 5 6 7 8 9 10 >>} <d>
              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} {<a> <> <b>})
   (<a> ^possible-match <pm> -^cond.prep.b <arg3> -^cond.prep.c <arg3>) #todo for c too
   (<pm> ^id <id>)
#   (<c> ^cond.prep.b <arg> ^cond.prep.c <arg3>)
#   (<d> ^cond.prep.b <arg3> ^cond.prep.c <arg>) 
   (<b> ^possible-match.id {<id2> <> <id>})
-->
   (<pm> ^<arg3> <id2>)
}

sp {find-parameters*propose*test-action2
   (state <s> ^name find-parameters
             -^test-action-final
              ^test-action-15
              ^test-action true
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.possible-match)
-->
   (<s> ^operator <o> + =)
   (<o> ^name test-action2
        ^category svs)
}
sp {find-parameters*apply*test-action2
   (state <s> ^name find-parameters
              ^operator.name test-action2)
-->
   (<s> ^test-action-final true) #changed here
}

sp {find-parameters*propose*test-action15
   (state <s> ^name find-parameters
             -^test-action-15
              ^test-action true
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.possible-match
             -^processing wait)
-->
   (<s> ^operator <o> + =)
   (<o> ^name test-action15
        ^category svs)
}
sp {find-parameters*apply*test-action15
   (state <s> ^name find-parameters
              ^operator.name test-action15)
-->
   (<s> ^test-action-15 true
        ^processing wait)
}


#sp {find-parameters*apply*test-action*remove-impossible
#   (state <s> ^name find-parameters
#              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <pos>
##              ^<arg0>.<arg>.possible-match <p1>
##              ^<arg0>.<arg>.possible-match {<p2> <> <p1>}
#              ^<arg0> <act>
#              ^operator.name test-action15)
#   (<pos> ^possible-match <p2>)
#   (<p2> ^id <id1>)#^type indiff 
#   (<pos> ^cond.prep <cp>)
#   (<cp> ^name ^a this ^b {<arg2> <> INDEF})
# -{(<s> ^<arg0>.<arg2>.possible-match.id <id2>)
#   (<act> ^found-possible <fp>)
#   (<fp> ^arg <arg> ^arg2 <arg2> ^withid <id2> ^objid <id1> -^neg true)}
#-->
##  (<s> ^scratched true)
#  (<pos> ^possible-match <p2> -) #TODO DOESNT WORK
#}
sp {find-parameters*apply*test-action*remove-indifferents
   (state <s> ^name find-parameters
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <pos>
#              ^<arg0>.<arg>.possible-match <p1>
#              ^<arg0>.<arg>.possible-match {<p2> <> <p1>}
#              ^scratched
              ^operator.name test-action2)
   (<pos> ^possible-match <p1>
          ^possible-match {<p2> <> <p1>})
   (<p1> ^type indiff ^id <id1>)
   (<p2> ^type indiff ^id <id2>)
 -{(<s> ^<arg0>.<arg>.possible-match <pm3>)
   (<pm3> ^id <id3> > <id1>)}
-->
#   (interrupt)
#   (<pos> ^secondary <p2>)
   (<pos> ^possible-match <p2> -) #TODO DOESNT WORK
}

sp {find-parameters*check-relation*elaborate*action-detected
   (state <s> ^name find-parameters
              ^test-action true
              ^test-action-final true
              ^<arg0>.cond-args 6
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^<arg0>.{<arg1> 1}.possible-match <pm1>
              ^<arg0>.{<arg2> 2}.possible-match <pm2>
              ^<arg0>.{<arg3> 3}.possible-match <pm3>
              ^<arg0>.{<arg4> 4}.possible-match <pm4>
              ^<arg0>.{<arg5> 5}.possible-match <pm5>
              ^<arg0>.{<arg6> 6}.possible-match <pm6>)
   (<pm1> ^id <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg5> <obj5>
          ^<arg6> <obj6>)
   (<pm2> ^id <obj2>
          ^<arg1> <obj1>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg5> <obj5>
          ^<arg6> <obj6>)
   (<pm3> ^id <obj3>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg4> <obj4>
          ^<arg5> <obj5>
          ^<arg6> <obj6>)
   (<pm4> ^id <obj4>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg5> <obj5>
          ^<arg6> <obj6>)
   (<pm5> ^id <obj5>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg6> <obj6>)
   (<pm6> ^id <obj6>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg5> <obj5>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
-->
   (<a> ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^<arg3>.possible-match <obj3>
          ^<arg4>.possible-match <obj4>
          ^<arg5>.possible-match <obj5>
          ^<arg6>.possible-match <obj6>)
}
sp {find-parameters*check-relation*elaborate*action-detected5
   (state <s> ^name find-parameters
              ^test-action true
              ^test-action-final true
              ^<arg0>.cond-args 5
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^<arg0>.{<arg1> 1}.possible-match <pm1>
              ^<arg0>.{<arg2> 2}.possible-match <pm2>
              ^<arg0>.{<arg3> 3}.possible-match <pm3>
              ^<arg0>.{<arg4> 4}.possible-match <pm4>
              ^<arg0>.{<arg5> 5}.possible-match <pm5>)
   (<pm1> ^id <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg5> <obj5>)
   (<pm2> ^id <obj2>
          ^<arg1> <obj1>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg5> <obj5>)
   (<pm3> ^id <obj3>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg4> <obj4>
          ^<arg5> <obj5>)
   (<pm4> ^id <obj4>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg5> <obj5>)
   (<pm5> ^id <obj5>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
-->
   (<a> ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^<arg3>.possible-match <obj3>
          ^<arg4>.possible-match <obj4>
          ^<arg5>.possible-match <obj5>)
}


sp {find-parameters*check-relation*elaborate*action-detected4
   (state <s> ^name find-parameters
              ^test-action true
              ^test-action-final true
              ^<arg0>.cond-args 4
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^<arg0>.{<arg1> 1}.possible-match <pm1>
              ^<arg0>.{<arg2> 2}.possible-match <pm2>
              ^<arg0>.{<arg3> 3}.possible-match <pm3>
              ^<arg0>.{<arg4> 4}.possible-match <pm4>)
   (<pm1> ^id <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>)
   (<pm2> ^id <obj2>
          ^<arg1> <obj1>
          ^<arg3> <obj3>
          ^<arg4> <obj4>)
   (<pm3> ^id <obj3>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg4> <obj4>)
   (<pm4> ^id <obj4>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
-->
   (<a> ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^<arg3>.possible-match <obj3>
          ^<arg4>.possible-match <obj4>)
}


sp {find-parameters*check-relation*elaborate*action-detected3
   (state <s> ^name find-parameters
              ^test-action true
              ^test-action-final true
              ^<arg0>.cond-args 3
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^<arg0>.{<arg1> 1}.possible-match <pm1>
              ^<arg0>.{<arg2> 2}.possible-match <pm2>
              ^<arg0>.{<arg3> 3}.possible-match <pm3>)
   (<pm1> ^id <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>)
   (<pm2> ^id <obj2>
          ^<arg1> <obj1>
          ^<arg3> <obj3>)
   (<pm3> ^id <obj3>
          ^<arg1> <obj1>
          ^<arg2> <obj2>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
-->
   (<a> ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^<arg3>.possible-match <obj3>)
}

sp {find-parameters*check-relation*elaborate*action-detected2
   (state <s> ^name find-parameters
              ^test-action true
              ^test-action-final true
              ^<arg0>.cond-args 2
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^<arg0>.{<arg1> 1}.possible-match <pm1>
              ^<arg0>.{<arg2> 2}.possible-match <pm2>)
   (<pm1> ^id <obj1>
          ^<arg2> <obj2>)
   (<pm2> ^id <obj2>
          ^<arg1> <obj1>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
-->
   (<a> ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>)
}


sp {find-parameters*check-relation*propose*select-parameters
   (state <s> ^name find-parameters
              ^test-action true
              ^test-action-final true
              ^depth-limit <dc>
              ^<arg0>.verbs <verbs>
#             -^processing wait
             -^last-action
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^<arg0>.possible-match-set <pms>)
   #TODO rethink no undo heuristic for multi actions
#  -{(<s> ^legal-action <la> ^superstate.superstate.relationships <rels2>) #heuristic to not undo last action
#    (<la> ^<arg1> <obj1>)
#    (<rels2> ^with <obj1> ^preposition <name> ^relations.obj <obj2>)}
  -{(<s> ^legal-action.<arg1> <obj1>)} #dont double touch heuristic (helpful for towers and 5puzzle)
#  -{(<s> ^legal-action <la>)#dont slide back (helpful for sokoban)
#    (<la> -^4 <something> ^3 <obj2>)} 
  -{(<s> ^dcount <dc> ^depth-limit <dc>)}
   (<pms> ^{<arg1> 1}.possible-match <obj1>
          ^{<arg2> 2}.possible-match <obj2>)
   -{(<act> ^found-possible <fp>)
     (<pms> ^<argv>.possible-match <objv>
            ^{<arg2v> <> <argv>}.possible-match {<obj2v> <> <objv>})
     (<fp> ^objid <objv> ^arg <argv> ^arg2 {<arg2v> <> INDEF} -^arg3 -^neg true)
    -{(<act> ^found-possible <fp2>)
       (<fp2> ^objid <objv> ^arg <argv> ^arg2 <arv2v> ^withid <obj2v> -^arg3)}}
   -{(<act> ^found-possible <fp3>) #TODO again simplify with withid2 gone
     (<pms> ^{<argz> <> <arg3z>}.possible-match {<objz> <> <obj3z>}
            ^{<arg2z> <> <argz>}.possible-match {<obj2z> <> <objz>}
            ^{<arg3z> <> <arg2z>}.possible-match {<obj3z> <> <obj2z>})
     (<fp3> ^objid <objz> ^arg <argz> ^arg2 <arg2z> ^arg3 <arg3z>)
    -{(<act> ^found-possible <fp4>)
       (<fp4> ^objid <objz> ^arg <argz> ^arg2 <arg2z> ^arg3 <arg3z> ^withid2 <obj2z> ^withid3 <obj3z>)}}
#-{(<act> ^found-possible <fp>) #TODO again simplify with withid2 gone
#     (<pms> ^<argv>.possible-match <objv>
#            ^{<arg2v> <> <argv>}.possible-match {<obj2v> <> <objv>})
#     (<fp> ^objid <objv> ^arg <argv> ^arg3 {<arg2v> <> INDEF})
#    -{(<act> ^found-possible <fp2>)
#       (<fp2> ^objid <objv> ^arg <argv> ^arg3 <arv2v> ^withid3 <obj2v>)}}
-->
   (<s> ^operator <o> + ) # force tie
   (<o> ^name select-parameters
        ^arg1 1 # HACK shouldnt assume first two conditions are for action
        ^arg2 2 #TODO multi action-remove
        ^action <arg0>
        ^verbs <verbs>
        ^possible-match-set <pms>
        ^category svs)
}

################################
## GOAL DETECTION args!!!

sp {find-parameters*elaborate*goal-args
   (state <s> ^name find-parameters
              ^dcount 0
              ^goals <go>
              ^goal-args <ga>)
   (<go> ^conditions <c> ^parameters <p>)
   (<p> ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.type <param>)
#   (<p> ^<arg>.{<param> <> type} <pa> ^<arg>.type.world.object <atr>)
   (<c> ^<arg> <conda>)
-->
   (<ga> ^<arg> <a>)
   (<a> ^objd <objd>
        ^cond <conda>
        ^param <param>)
   (<objd> ^word object)
}

sp {find-parameters*elaborate*goal-object-desc
   (state <s> ^name find-parameters
              ^dcount 0
              ^goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^objd <objd>
        ^cond <conda>)
   (<conda> ^attribute.<type> <atr>)
-->
   (<objd> ^word <atr>)
}

sp {find-parameters*goal*propose*index-parameter
   (state <s> ^name find-parameters
              ^dcount 0
             -^goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.obj <objs>
              ^goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.objd <objd>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name index-parameter 
        ^parameter <pa>)
   (<pa> ^index-info <ii> ^lexical <objd> ^type object)
   (<ii> ^infer-match false ^return-all true ^use-interaction false)
}


sp {find-parameters*goal*apply*index-parameter
   (state <s> ^name find-parameters
              ^operator <o>
              ^dcount 0
              ^goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^topstate.object <obj>)
   (<a> ^param <param> ^objd <objd> -^obj <obj>)
   (<o> ^name index-parameter
        ^parameter.lexical <objd2>
        ^parameter.result.id <id>)
   (<obj> ^id <id> ^category <param>)
 -{(<objd2> ^word <word>)
   (<objd> -^word <word>)}
 -{(<objd2> -^word <word2>)
   (<objd> ^word <word2>)}
-->
   (<a> ^obj <obj>)
}

sp {find-parameters*goal*propose*lookup-preposition
   (state <s> ^name find-parameters
             -^processing wait
             -^found-prep.type <name>
              ^goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.cond <conda>)
   (<conda> ^prep <prep>)
   (<prep> ^name <name> ^a this
          -^name << smaller-than linear-with >>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-preposition
        ^category svs
        ^type <name>)
}

sp {find-parameters*goal*propose*find-relations
   (state <s> ^name find-parameters
              ^svs <svs>
              ^goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^found-prep <fprep>)
   (<a> ^obj <obj> ^cond <cond>)
   (<fprep> ^type <name>)
   (<cond> ^prep <prep>)
   (<obj> ^id <id>)
   (<prep> ^name <name> ^a this
          -^name << smaller-than linear-with >>)
 -{(<s> ^relationships <rels>)
   (<rels> ^with <id> ^preposition <name>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-relations
        ^category svs
#        ^svs-link <svs>
        ^obj <id>
        ^ind 1
        ^found-prep <fprep>
        ^prep <name>)
}
sp {find-parameters*goal*propose*find-relations*smaller-than
   (state <s> ^name find-parameters
              ^svs <svs>
              ^goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^obj <obj> ^cond <cond>)
   (<cond> ^prep <prep>)
   (<obj> ^id <id>)
   (<prep> ^name {<name> << smaller-than linear-with >>})
 -{(<s> ^relationships <rels>)
   (<rels> ^with <id> ^preposition <name>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-relations
        ^category svs
#        ^svs-link <svs>
        ^obj <id>
        ^ind 1
        ^prep <name>)
}

##END GOAL DETECTION ARG CODE
###############################

################################
## FAILURE DETECTION args!!!

sp {find-parameters*elaborate*failure-args
   (state <s> ^name find-parameters
              ^dcount 0
              ^failures <go>
              ^failure-args <ga>)
   (<go> ^conditions <c> ^parameters <p>)
   (<p> ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.type <param>)
#   (<p> ^<arg>.{<param> <> type} <pa> ^<arg>.type.world.object <atr>)
   (<c> ^<arg> <conda>)
-->
   (<ga> ^<arg> <a>)
   (<a> ^objd <objd>
        ^cond <conda>
        ^param <param>)
   (<objd> ^word object)
}

sp {find-parameters*elaborate*failure-object-desc
   (state <s> ^name find-parameters
              ^dcount 0
              ^failure-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^objd <objd>
        ^cond <conda>)
   (<conda> ^attribute.<type> <atr>)
-->
   (<objd> ^word <atr>)
}

sp {find-parameters*failure*propose*index-parameter
   (state <s> ^name find-parameters
              ^dcount 0
             -^failure-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.obj <objs>
              ^failure-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.objd <objd>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name index-parameter 
        ^parameter <pa>)
   (<pa> ^index-info <ii> ^lexical <objd> ^type object)
   (<ii> ^infer-match false ^return-all true ^use-interaction false)
}
#   (<s> ^operator <o> + =)
#   (<o> ^name index-object
#        ^return-all true
#        ^object-param <p>
#        ^arg <arg>)
#   (<p> ^type object
#        ^lexical <objd>
#        ^index-info <ii>)
#   (<ii> ^return-all true
#         ^use-interaction false
#         ^infer-match false)
#}


sp {find-parameters*failure*apply*index-parameter
   (state <s> ^name find-parameters
              ^operator <o>
              ^dcount 0
              ^failure-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^topstate.object <obj>)
   (<a> ^param <param> ^objd <objd> -^obj <obj>)
   (<o> ^name index-parameter
        ^parameter.lexical <objd2>
        ^parameter.result.id <id>)
   (<obj> ^id <id> ^category <param>)
 -{(<objd2> ^word <word>)
   (<objd> -^word <word>)}
 -{(<objd2> -^word <word2>)
   (<objd> ^word <word2>)}
-->
   (<a> ^obj <obj>)
}

sp {find-parameters*failure*propose*lookup-preposition
   (state <s> ^name find-parameters
             -^processing wait
             -^found-prep.type <name>
              ^failure-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.cond <conda>)
   (<conda> ^prep <prep>)
   (<prep> ^name <name> ^a this
          -^name << smaller-than linear-with >>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-preposition
        ^category svs
        ^type <name>)
}

sp {find-parameters*failure*propose*find-relations
   (state <s> ^name find-parameters
              ^svs <svs>
              ^failure-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^found-prep <fprep>)
   (<a> ^obj <obj> ^cond <cond>)
   (<fprep> ^type <name>)
   (<cond> ^prep <prep>)
   (<obj> ^id <id>)
   (<prep> ^name <name> ^a this
          -^name << smaller-than linear-with >>)
 -{(<s> ^relationships <rels>)
   (<rels> ^with <id> ^preposition <name>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-relations
        ^category svs
#        ^svs-link <svs>
        ^obj <id>
        ^ind 1
        ^found-prep <fprep>
        ^prep <name>)
}

sp {find-parameters*failure*propose*find-relations*smaller-than
   (state <s> ^name find-parameters
              ^svs <svs>
              ^failure-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^obj <obj> ^cond <cond>)
   (<cond> ^prep <prep>)
   (<obj> ^id <id>)
   (<prep> ^name {<name> << smaller-than linear-with >>})
 -{(<s> ^relationships <rels>)
   (<rels> ^with <id> ^preposition <name>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-relations
        ^category svs
#        ^svs-link <svs>
        ^obj <id>
        ^ind 1
        ^prep <name>)
}

##END FAILURE DETECTION ARG CODE
###############################

sp {find-parameters*elaborate*problem-space
   (state <s> ^name find-parameters)
-->
   (<s> ^problem-space <p>)
   (<p> ^name find-parameters
        ^default-state-copy yes
        ^two-level-attributes relationships found-prep failure-found-possible goal-found-possible#goal-args # found-possible
        ^one-level-attributes depth-limit goal-cond-args failure-cond-args multiplayer)
}


## NO ACTIONS LEFT
sp {find-parameters*propose*complete-find-parameter-failed
   (state <s> ^name find-parameters
              ^test-action true
              ^goal-cond-args)
#             -^processing wait)
-{(<s> ^dcount 0 ^multiplayer true)}
-->
   (<s> ^operator <o> + ) 
   (<o> ^name complete-find-parameter-failed
        ^category svs)
}

sp {find-parameters*apply*complete-find-parameter-failed*sub
   (state <s> ^name find-parameters
              ^desired <d>
             -^multiplayer true
             -^dcount 0
              ^operator.name complete-find-parameter-failed)
-->
#   (interrupt)
   (<s> ^partial-failure <d>) #TODO mark failure?
}

#sp {find-parameters*apply*complete-find-parameter-failed*multiplayer-evaluate
#   :interrupt
#   (state <s> ^name find-parameters
#              ^multiplayer true
#              ^goal-score <gs>
##              ^superstate.
#              ^desired <d>
#             -^dcount 0
#              ^operator.name complete-find-parameter-failed)
#-->
##   (interrupt)
#   (<s> ^numeric-value <gs>
#        ^indifferent <d>)
#}

sp {find-parameters*apply*complete-find-parameter-failed*multiplayer-evaluate
#   :interrupt
   (state <s> ^name find-parameters
              ^multiplayer true
              ^superstate.superstate <sss>
              ^goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.goal-possible-match.{<arg2> << 1 2 3 4 5 6 7 8 9 10 >>} <yid>
              ^superstate.operator.superoperator <o> #haha wtf why but yes the same
              ^desired <d>
             -^dcount 0
              ^operator.name complete-find-parameter-failed)
   (<sss> ^operator <o> +)
-->
#   (interrupt)
   (<s> ^indifferent <d>)
   (<sss> ^operator <o> = 1.0)
}


sp {find-parameters*apply*complete-find-parameter-failed*top
   (state <s> ^name find-parameters
              ^desired <d>
              ^dcount 0
              ^depth-limit {<dc> < 13}
              ^operator.name complete-find-parameter-failed)
-->
   (interrupt)
   (<s> ^depth-limit (+ <dc> 1)) 
   (<s> ^depth-limit <dc> -)
}

sp {find-parameters*apply*complete-find-parameter-failed*multiplayer
   (state <s> ^name find-parameters
              ^multiplayer true
              ^desired <d>
              ^dcount 0
              ^depth-limit {<dc> < 13}
              ^operator <o>)
   (<o> ^name complete-find-parameter-failed)
-->
#   (interrupt)
   (<s> ^operator <o> <)
}

#order preferences
sp {selection*prefer*evaluate*select-parameters*over*complete-find-parameter-failed
   (state <s> ^name selection
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name evaluate-operator ^superoperator.name select-parameters)
   (<o2> ^name evaluate-operator ^superoperator.name complete-find-parameter-failed)
-->
   (<s> ^operator <o1> > <o2>)
}

#todo failure handle better
#sp {find-parameters*apply*complete-find-parameter-failed
#   (state <s> ^name find-parameters
#              ^conds.<arg>
#              ^superstate <ss>
#              ^operator.name complete-find-parameter-failed)
#-->
#   (<ss> ^valid-arg.<arg> failed ^action failed)
#}
###########################################3

#COPY DOWN STUFF
sp {find-parameters*elaborate*problem-space*goal-args
   (state <s> ^name find-parameters
              ^superstate.superstate.goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^goal-args <ga>)
-->
   (<ga> ^<arg> <b>)
}

sp {find-parameters*elaborate*problem-space*goal-args*substructs
   (state <s> ^name find-parameters
              ^superstate.superstate.goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^goal-args <ga>)
   (<ga> ^<arg> <b>)
   (<a> ^{<something> <> goal-possible-match} <x>)
-->
   (<b> ^<something> <x>)
}

sp {find-parameters*elaborate*problem-space*failure-args
   (state <s> ^name find-parameters
              ^superstate.superstate.failure-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^failure-args <ga>)
-->
   (<ga> ^<arg> <b>)
}

sp {find-parameters*elaborate*problem-space*failure-args*substructs
   (state <s> ^name find-parameters
              ^superstate.superstate.failure-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^failure-args <ga>)
   (<ga> ^<arg> <b>)
   (<a> ^{<something> <> failure-possible-match} <x>)
-->
   (<b> ^<something> <x>)
}


sp {find-parameters*elaborate*problem-space*actions
   (state <s> ^name find-parameters
              ^superstate.superstate.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
-->
   (<s> ^<arg0> <b>)
}
sp {find-parameters*elaborate*problem-space*args
   (state <s> ^name find-parameters
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^superstate.superstate.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
-->
   (<act> ^<arg> <b>)
}
sp {find-parameters*elaborate*problem-space*act-other-attributes
   (state <s> ^name find-parameters
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^superstate.superstate.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<atr> << verbs cond-args found-possible >>} <c>)#verb-prep
-->
   (<act> ^<atr> <c>)
}

sp {find-parameters*elaborate*problem-space*argsdcount
   (state <s> ^name find-parameters
              ^superstate.superstate.dcount <c>)
-->
   (<s> ^dcount (+ <c> 1))
}

sp {find-parameters*elaborate*problem-space*args*substructs
   (state <s> ^name find-parameters
              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^superstate.superstate.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^<arg0>.<arg> <b>)
   (<a> ^{<something> <> possible-match} <x>)
-->
   (<b> ^<something> <x>)
}


sp {select-parameters*apply*result
#   :interrupt
   (state <s> ^name select-parameters
              ^superstate.superstate <ss>
              ^topstate <ts>
              ^superstate.<arg0>.verbs <verbs> #verb <verb>
              ^superstate.operator <o>)
   (<ss> ^name find-action)
   (<o> ^name select-parameters
        ^action <arg0>
#        ^arg1 <arg1>
#        ^arg2 <arg2>
        ^verbs <verbs>
        ^possible-match-set <pms>)
   (<verbs> ^<a1> <verb1>)
   (<verb1> ^{<a1> 1} <arg1> ^{<a2> 2} <arg2> ^verb-name <vname>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>)       
-->
   (<ss> ^valid-arg.<a1> <obj1>
         ^valid-arg.<a2> <obj2> #todo need all parameters of action
         ^action <a>)
   (<a> ^verb <vname>)
   (<ts> ^flound-action <fa>)
   (<fa> ^dcount 1 ^obj1 <obj1b> ^obj2 <obj2b> ^mark done)
}

sp {select-parameters*apply*result*2verbs
   (state <s> ^name select-parameters
              ^superstate.superstate <ss>
              ^topstate <ts>
              ^superstate.<arg0>.verbs <verbs> #verb <verb>
              ^superstate.operator <o>)
   (<ss> ^name find-action)
   (<o> ^name select-parameters
        ^action <arg0>
#        ^arg1 <arg1>
#        ^arg2 <arg2>
        ^verbs <verbs>
        ^possible-match-set <pms>)
   (<verbs> ^<a1> <verb1> ^<a2> <verb2>)
   (<verb1> ^{<a1> 1} <arg1> ^{<a2> 2} <arg2> ^verb-name <vname>)
   (<verb2> ^<a1> <arg1b> ^<a2> <arg2b>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^<arg1b>.possible-match <obj1b>
          ^<arg2b>.possible-match <obj2b>)       
-->
   (<ss> ^valid-arg.<a1> <obj1>
         ^valid-arg.<a2> <obj2> #todo need all parameters of action
         ^action <a>)
   (<a> ^verb <vname>)
   (<ts> ^flound-action <fa>)
   (<fa> ^dcount 1 ^obj1 <obj1b> ^obj2 <obj2b>)
}

sp {select-parameters*apply*result*solved
   (state <s> ^name select-parameters
              ^superstate.superstate <ss>
#              ^superstate.<arg0>.verb <verb>
              ^superstate.depth-limit 1
              ^superstate.operator <o>)
   (<ss> ^name find-action)
   (<o> ^name select-parameters
        ^action <arg0>
        ^arg1 <arg1>
        ^arg2 <arg2>
        ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>)
-->
   (<ss> ^solved true)
}
