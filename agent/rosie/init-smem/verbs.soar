###  initialize structures in semantic memory for indexing

### semantic memory will store the following
### 1. lexical knowledge about verbs/objects
### 2. mapping of lexical knowledge about verbs to procedural knowledge about actions


### add known actions to semantic memory

smem --add {
### put down a red block.
     (<a1> ^linguistic <al1> ^procedural <ap1> ^type action)
     (<al1> ^verb put ^direct-object <obj>) 
     (<ap1> ^op_name op_put-down ^argument <obj>)
## put the red block in the pantry.
     (<a2> ^linguistic <al2> ^procedural <ap2> ^type action)
     (<al2> ^verb put ^direct-object <obj2> ^pp-object <pp2>) 
     (<pp2> ^preposition <prep> ^object <pobj>)
     (<ap2> ^op_name op_put-down-object-location ^argument1 <obj2> ^argument2 <parg2>)
     (<parg2> ^relation <prep> ^argument <pobj>)
## point to the yellow block.
     (<a3> ^linguistic <al3> ^procedural <ap3> ^type action)
     (<al3> ^verb point ^pp-object <pp3>) 
     (<pp3> ^object <obj3>)
     (<ap3> ^op_name op_point-to-object ^argument1 <parg3>)
     (<parg3> ^argument <obj3>)
## pick up the yellow block.
     (<a4> ^linguistic <al4> ^procedural <ap4> ^type action)
     (<al4> ^verb pick ^direct-object <obj4>) 
     (<ap4> ^op_name op_pick-up-object ^argument1 <obj4>)
### weigh the yellow block.
     (<a6> ^linguistic <al6> ^procedural <ap6> ^type action)
     (<al6> ^verb weigh ^direct-object <obj6>) 
     (<ap6> ^op_name op_weigh-object ^argument1 <obj6>)
## measure the green sphere.
     (<a7> ^linguistic <al7> ^procedural <ap7> ^type action)
     (<al7> ^verb measure ^direct-object <obj7>) 
     (<ap7> ^op_name op_measure-object ^argument1 <obj7>)
## close the pantry/stove.
     (<a16> ^linguistic <al16> ^procedural <ap16> ^type action)
     (<al16> ^verb close ^direct-object <obj16>) 
     (<ap16> ^op_name op_close-location ^argument1 <obj16>)
## activate (on/off; change the current state to the other state)
     (<a17> ^linguistic <al17> ^procedural <ap17> ^type action)
     (<al17> ^verb activate ^direct-object <obj17>) 
     (<ap17> ^op_name op_activate ^argument1 <obj17>)
## open the pantry/stove.
     (<a18> ^linguistic <al18> ^procedural <ap18> ^type action)
     (<al18> ^verb open ^direct-object <obj18>) 
     (<ap18> ^op_name op_open-location ^argument1 <obj18>)
## activate 
     (<a19> ^linguistic <al19> ^procedural <ap19> ^type action)
     (<al19> ^verb stop ^direct-object <obj19>) 
     (<ap19> ^op_name op_activate ^argument1 <obj19>)
## stop
     (<a20> ^linguistic <al20> ^procedural <ap20> ^type action)
     (<al20> ^verb stop ^direct-object <obj20>) 
     (<ap20> ^op_name op_stop ^argument1 <obj20>)
## wait
     # (<a10> ^linguistic <al10> ^procedural <ap10> ^type action)
     # (<al10> ^verb wait ^pp-object <pp10>) 
     # (<pp10> ^object <obj10>)
     # (<ap10> ^op_name op_wait ^argument1 <parg10>)
     # (<parg10> ^argument <obj10>)
## new wait
     (<a10> ^linguistic <al10> ^procedural <ap10> ^type action)
     (<al10> ^verb wait ^state-object <s10>) 
     (<s10> ^object <obj10> ^state <st10>)
     (<ap10> ^op_name op_wait ^argument1 <parg10>)
     (<parg10> ^argument <obj10> ^state <st10>)
}
