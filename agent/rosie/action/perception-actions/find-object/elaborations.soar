sp {find-object*elaborate*object-desc
   (state <s> ^name find-object
              ^superstate.operator.object <desc>)
-->
   (<s> ^object-desc <desc>)
}

sp {find-object*elaborate*moved-to-goal
   (state <s> ^name find-object
              ^action-goal.moved-to-goal true)
-->
   (<s> ^moved-to-goal true)
}

sp {find-object*elaborate*goal-location
   (state <s> ^name find-object
              ^topstate.object <goal>)
   (<goal> ^property <name-prop>)
   (<name-prop> ^name name
                ^word goal)
-->
   (<s> ^goal-location <goal>)
}

sp {find-object*elaborate*indexed-word
   (state <s> ^name find-object
              ^action-goal.indexed-word.result.sense <word>)
   (<word> ^property.type <> generic)
-->
   (<s> ^indexed-word <word>)
}

sp {find-object*elaborate*matching-info
   (state <s> ^name find-object)
-->
   (<s> ^matching-info <info>)
}

sp {find-object*elaborate*matching-info*match-word
   (state <s> ^name find-object
              ^indexed-word <word>
              ^matching-info <info>)
   (<word> ^property.name <> generic)
-->
   (<info> ^match-word.word <word>)
}

sp {find-object*elaborate*matching-info*candidates
   (state <s> ^name find-object
              ^topstate.object <obj>
              ^matching-info <info>)
   (<obj> ^category block)
-->
   (<info> ^candidate <obj>)
} 

# Mark as unknown if the desired property isn't there
sp {find-object*elaborate*match-word*unknown*no-property
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^match-word <mw>
           ^candidate <cand>)
   (<mw> ^word <word>)
   (<word> ^property.name <prop-name>)
   (<cand> -^property.name <prop-name>)
-->
   (<mw> ^unknown-match <cand>)
}

# Mark an adjective as unknown if the property is either none (unknown) or uncertain
sp {find-object*elaborate*match-word*adjective*unknown*not-certain
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^match-word <mw>
           ^candidate <cand>)
   (<mw> ^word <word>)
   (<word> ^type adjective
           ^property.name <prop-name>)
   (<cand> ^property <prop>)
   (<prop> ^name <prop-name>
           ^prev-case << none uncertain >>)
-->
   (<mw> ^unknown-match <cand>)
}

# Mark a superlative as unknown if the property hasn't been measured (no feature-val)
sp {find-object*elaborate*match-word*superlative*unknown
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^match-word <mw>
           ^candidate <cand>)
   (<mw> ^word <word>)
   (<word> ^type superlative
           ^property.name <prop-name>)
   (<cand> ^property <prop>)
   (<prop> ^name <prop-name>
          -^feature-val)
-->
   (<mw> ^unknown-match <cand>)
}

# Mark an adjective as a bad match if the propetry's label is certain, but different
sp {find-object*elaborate*match-word*adjective*bad-match
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^match-word <mw>
           ^candidate <cand>)
   (<mw> ^word <word>)
   (<word> ^type adjective
           ^label <label>
           ^property.name <prop-name>)
   (<cand> ^property <prop>)
   (<prop> ^name <prop-name>
           ^prev-case certain
           ^label <> <label>)
-->
   (<mw> ^bad-match <cand>)
}

# Mark a lowest superlative as a bad match if there is a candidate with a lower value for the property
sp {find-object*elaborate*match-word*superlative*bad-match*lowest
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^match-word <mw>
           ^candidate <cand>
           ^candidate.property <better-prop>)
   (<mw> ^word <word>)
   (<word> ^type superlative
           ^property.name <prop-name>
           ^value lowest)
   (<cand> ^property <prop>)
   (<prop> ^name <prop-name>
           ^feature-val <val>)
   (<better-prop> ^name <prop-name>
            	  ^feature-val < <val>)
-->
   (<mw> ^bad-match <cand>)
}

# Mark a highest superlative as a bad match if there is a candidate with a higher value for the property
sp {find-object*elaborate*match-word*superlative*bad-match*highest
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^match-word <mw>
           ^candidate <cand>
           ^candidate.property <better-prop>)
   (<mw> ^word <word>)
   (<word> ^type superlative
           ^property.name <prop-name>
           ^value highest)
   (<cand> ^property <prop>)
   (<prop> ^name <prop-name>
           ^feature-val <val>)
   (<better-prop> ^name <prop-name>
            	  ^feature-val > <val>)
-->
   (<mw> ^bad-match <cand>)
}

# Mark a superlative as a bad match if its value is known but there is still an unknown somewhere out there
#   (still can't stay it's the highest/lowest)
sp {find-object*elaborate*match-word*superlative*bad-match*still*unknown
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^match-word <mw>
           ^candidate <cand>)
   (<mw> ^word <word>
         ^unknown-match)
   (<word> ^type superlative
           ^property.name <prop-name>)
   (<cand> ^property <prop>)
   (<prop> ^name <prop-name>
           ^feature-val <val>)
-->
   (<mw> ^bad-match <cand>)
}

# Mark an adjective as a good match if the property's case is certain and a match
sp {find-object*elaborate*match-word*adjective*good-match
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^match-word <mw>
           ^candidate <cand>)
   (<mw> ^word <word>)
   (<word> ^type adjective
           ^label <label>
           ^property.name <prop-name>)
   (<cand> ^property <prop>)
   (<prop> ^name <prop-name>
           ^prev-case certain
           ^label <label>)
-->
   (<mw> ^good-match <cand>)
}

# Mark a superlative as a good match if it's value is known and it is not a bad match
#   (Previous rules list it as a bad match if there's a better match or still an unknown value)
sp {find-object*elaborate*match-word*superlative*good-match
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^match-word <mw>
           ^candidate <cand>)
   (<mw> ^word <word>
        -^bad-match <cand>)
   (<word> ^type superlative
           ^property.name <prop-name>)
   (<cand> ^property <prop>)
   (<prop> ^name <prop-name>
           ^feature-val <val>)
-->
   (<mw> ^good-match <cand>)
}

# A candidate is a bad match if it is a bad match for some property
sp {find-object*elaborate*match-info*bad-match
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^candidate <cand>
           ^match-word.bad-match <cand>)
-->
   (<info> ^bad-match <cand>)
}

# A candidate is an unknown match if it is not a bad match, but at least 1 property is unknown
sp {find-object*elaborate*match-info*unknown-match
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^candidate <cand>
           ^match-word.unknown-match <cand>
          -^match-word.bad-match <cand>)
-->
   (<info> ^unknown-match <cand>)
}

# A candidate is a good match if it is neither a bad match or an unknown match
sp {find-object*elaborate*match-info*good-match
   (state <s> ^name find-object
              ^matching-info <info>)
   (<info> ^candidate <cand>
          -^match-word.bad-match <cand>
          -^match-word.unknown-match <cand>)
-->
   (<info> ^good-match <cand>)
}