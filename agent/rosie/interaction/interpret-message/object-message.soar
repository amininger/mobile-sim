# Rules that handle when an object-message is sent by the user

# Proposal
sp {interpret-message*propose*object-message
   (state <s> ^name interpret-message
              ^instructor-message <msg>)
   (<msg> ^type object-message
         -^processed2)
-->

   (<s> ^operator <o> +)
   (<o> ^name object-message
        ^category communication
        ^message <msg>)
}

# Elaborate useful information from the message to the operator
sp {interpret-message*elaborate*object-message*object
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name object-message
        ^message.information.object <obj>)
-->
   (<o> ^object <obj>)
}

sp {interpret-message*elaborate*object-message*relation
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name object-message
        ^message.information.relation <rel>)
-->
   (<o> ^relation <rel>)
}

sp {interpret-message*elaborate*object-message*specifier
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name object-message
        ^message.information.object.specifier <spec>)
-->
   (<o> ^specifier <spec>)
}

# Mark Processed

sp {interpret-message*apply*object-message*mark*processed1
   (state <s> ^name interpret-message
              ^operator <o>
              ^quiescence t)
   (<o> ^name object-message
        ^message <msg>)
-->
   (<msg> ^processed1 true)
}

sp {interpret-message*apply*object-message*mark*processed2
   (state <s> ^name interpret-message
              ^operator <o>
              ^quiescence t)
   (<o> ^name object-message
        ^message <msg>)
   (<msg> ^processed1 true)
-->
   (<msg> ^processed2 true)
}


###########################################################
#
# this-object-message
#   Teaching message about an object
#   E.g. 'This is a red triangle'
#
###########################################################

# If the specifier is 'this' and there is no relation, 
#   treat it as a this-object-message
sp {interpret-message*apply*object-message*train-on-object
   (state <s> ^name interpret-message
              ^operator <o>
             -^current-purpose.type which-question)
   (<o> ^name object-message
        ^specifier << this that >>
       -^relation)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type train-on-object
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^indexable <i>)
   (<i> ^type object
        ^lexical.specifier this
        ^index-info.use-interaction true)
   (<sat> ^learning-event.type object)
}

sp {interpret-message*apply*object-message*train-on-object*copy*word
   (state <s> ^name interpret-message
              ^operator <o>
              ^new-segment-info.purpose.parameters <params>)
   (<o> ^name object-message
        ^specifier << this that >>
        ^object.word <word>
       -^relation)
-->
   (<params> ^indexable <i>)
   (<i> ^type word
        ^lexical <word>
        ^index-info.use-interaction true)
}



###########################################################
#
# relation-object-message
#   Teaching message about a relationship (preposition)
#   E.g. 'The red triangle is left-of the blue object'
#
###########################################################

sp {interpret-message*apply*object-message*teach-preposition
   (state <s> ^name interpret-message
              ^operator <o>
             -^current-purpose.type which-question)
  -{(<s> ^topstate.current-game.learning <l>)
    (<l> -^interaction true)}
   (<o> ^name object-message
        ^message <msg>
        ^object <obja>
        ^relation <rel>)
   (<rel> ^p1.object <obja> ^p2.object <objb> ^word <prep>)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator mentor)
   (<p> ^type teach-preposition
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^indexable <i>
             ^indexable <i2>
             ^object1 <obja>
             ^object2 <objb>
             ^prep <prep>)
   (<i> ^type object
        ^lexical <obja>
        ^index-info <idx-info>)
   (<i2> ^type object
        ^lexical <objb>
        ^index-info <idx-info>)
   (<idx-info> ^use-interaction true
               ^return-all false
               ^infer-match true)
   (<sat> ^learning-event.type preposition)
}

###########################################################
#
# ask-property-name response
# After the agent asks 'What is blue?'
# E.g. 'Red is a color' or just 'a color'
#
###########################################################

# If the message is in response to a category-of-word question,
#   learn the word2cat mapping
sp {interpret-message*apply*object-message*ask-property-name*response
   (state <s> ^name interpret-message
              ^operator <o>
              ^current-purpose <purp>)
   (<purp> ^type ask-property-name
           ^word <word>)
   (<o> ^name object-message
        ^message <msg>
        ^specifier << none INDEF >>
        ^object.word {<prop-name> <> <word> }
       -^relation)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-word
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^indexable <i>
             ^word <word>)
   (<i> ^type property
        ^lexical <prop-name>
        ^index-info.use-interaction true)
   (<sat> ^learning-event.type word)
}



#############################################################
#
#  which-question response
#  After the agent asks 'which red object?'
#  E.g. 'The rectangle'
#
#############################################################

sp {interpret-message*apply*object-message*which-question-response*copy-word
   (state <s> ^name interpret-message
              ^operator <o>
              ^current-purpose <p>)
   (<o> ^name object-message
        ^object.word {<word> <> UNKNOWN})
   (<p> ^type which-question
        ^target-object.lexical <lex>)
-->
   (<lex> ^word <word>)
}

sp {interpret-message*apply*object-message*which-question-response*add*specifier
   (state <s> ^name interpret-message
              ^operator <o>
              ^current-purpose <p>)
   (<o> ^name object-message
        ^specifier <new-spec>)
   (<p> ^type which-question
        ^target-object.lexical <lex>)
-->
   (<lex> ^specifier <new-spec>)
}

sp {interpret-message*apply*object-message*which-question-response*copy-relation
   (state <s> ^name interpret-message
              ^operator <o>
              ^current-purpose <p>)
   (<o> ^name object-message
        ^relation <rel>)
   (<p> ^type which-question
        ^target-object <target>)
   (<target> ^lexical <obj1>)
   (<rel> ^p2.object <obj2> ^word <prep>)
-->
   (<obj1> ^relation <rel-copy>)
   (<rel-copy> ^p1.object <obj1>
               ^p2.object <obj2>
               ^word <prep>)
}


###########################
# Messages for games
###########################

sp {interpret-message*apply*object-message*game-turn
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name object-message
        ^message <msg>
        ^object.word turn)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type game-turn
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^dialog-event.type turn)
}

##################################
sp {interpret-message*apply*object-message*game-start
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name object-message
        ^message <msg>
        ^object.word {<game-name> <> game}
        ^object.word game)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type game-start
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^game-name <game-name>)
   (<sat> ^dialog-event.type game)
}
