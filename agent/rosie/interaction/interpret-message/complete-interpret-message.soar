sp {interpret-message*propose*complete-interpret-message
   (state <s> ^name interpret-message)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-interpret-message)
}

sp {interpret-message*apply*complete-interpret-message*mark*interpreted
   (state <s> ^name interpret-message
              ^operator.name complete-interpret-message
              ^il-message <msg>
              ^superstate <ss>)
-->
   (<ss> ^interpreted <msg>)
}

# AM: IFIX: Re-enabled the next 2 rules so that the interaction operator will retract
 sp {interpret-message*apply*complete-interpret-message*delete*nl-il
    (state <s> ^name interpret-message
               ^operator.name complete-interpret-message
               ^il-message <msg>
               ^topstate.nl.input-link <nil>)
    (<nil> ^message <msg>)
 -->
    (<nil> ^message <msg> -)
 }

 sp {interpret-message*apply*complete-interpret-message*mark*processed
    (state <s> ^name interpret-message
               ^operator.name complete-interpret-message
               ^il-message <msg>
               ^topstate.io.input-link <il>)
    (<il> ^message <msg>)
 -->
    (<msg> ^processed true)
 }

sp {interpret-message*apply*complete-interpret-message*copy*new-segment-info
   (state <s> ^name interpret-message
              ^operator.name complete-interpret-message
              ^topstate.interaction.changes <c>
              ^new-segment-info <info>)
#              ^topstate.interaction.status <status>)
-->
   # Copy to top-state so the segment isn't part of the GDS for the interaction substate
   (<c> ^new-segment-info <info>) 
}

sp {interpret-message*apply*complete-interpret-message*copy*modify-segment-info
   (state <s> ^name interpret-message
              ^operator.name complete-interpret-message
              ^modify-segment-info <info>
	      ^topstate.interaction.changes <c>)
-->
   (<c> ^modify-segment-info <info>) 
}

# sp {interpret-message*apply*complete-interpret-message*copy*performed
#    (state <s> ^name interpret-message
#               ^operator.name complete-interpret-message
#              -^new-segment-info
#               ^current-purpose.satisfaction.dialog-event.type <type>
#               ^instructor-message.type <type>
#               ^topstate.interaction.status <status>)
# -->
#    (<status> ^performed.dialog-event.type <type>)
# } 

## if the instructor message is expected by a segment, mark this segment to be terminated
sp {interpret*message*instructor*message*expected
   (state <s> ^name interpret-message
   	      ^topstate.interaction.stack.segment <seg>
	      ^current-purpose.satisfaction.dialog-event <de>
	      ^instructor-message.type <type>
	      ^topstate.interaction.changes <c>
	      ^operator.name complete-interpret-message)
   (<de> ^type <type>)
-->
   (<c> ^terminate-segment <seg>)
}


sp {interpret-message*apply*complete-interpret-message*clear-interaction-stack
   (state <s> ^name interpret-message
              ^operator.name complete-interpret-message
              ^clear-interaction-stack true
              ^topstate.interaction.changes <c>)
-->
   (<c> ^clear-interaction-stack true)
}