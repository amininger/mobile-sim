sp {interaction*apply*pop-segment
   (state <s> ^name interaction
              ^operator <o>
              ^topstate.interaction.stack <stack>)
   (<o> ^name pop-segment
        ^segment <top-seg>)
   (<stack> ^segment <top-seg>)
   (<top-seg> ^next <next-seg>)
-->
   (<stack> ^segment <top-seg> -
            ^segment <next-seg>)
   (<next-seg> ^prev <top-seg> -)
}

#sp {interaction*apply*pop-segment*remove*terminate-segment
#   (state <s> ^name interaction
#              ^operator <o>
#              ^topstate.interaction.changes <c>)
#   (<o> ^name pop-segment
#        ^segment <seg>)
#   (<c> ^terminate-segment <seg>)
#-->
#   (<c> ^terminate-segment <seg> -)
#}

# AM: IFIX: Now applying pop-segment will cause the interaction substate to retract
sp {interaction*apply*pop-segment*remove*terminate-segment
   (state <s> ^name interaction
              ^operator.name pop-segment
              ^change-type terminate-segment
              ^change-info <seg>
              ^topstate.interaction.changes <c>)
   (<c> ^terminate-segment <seg>)
-->
   (<c> ^terminate-segment <seg> -)
}

sp {interaction*apply*pop-segment*remove*clear-interaction-stack
   (state <s> ^name interaction
              ^operator <o>
              ^topstate.interaction.changes <c>)
   (<o> ^name pop-segment
        ^segment.next.purpose none)
   (<c> ^clear-interaction-stack true)
-->
   (<c> ^clear-interaction-stack true -)
}

#####################################################################
#
# Send a message after a segment is satisfied (e.g. a confirmation)
#
#####################################################################

sp {interaction*apply*pop-segment*send-message
   (state <s> ^name interaction
              ^operator <o>
	          ^topstate.interaction.changes <c>)
   (<o> ^name pop-segment
        ^segment <seg>)
   (<seg> ^was-satisfied true
          ^purpose.type << teach-preposition train-on-object >>)
-->
   (<c> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type confirmation)
}

#####################################################################
#
# Send information about the segment being returned to
#
#####################################################################

sp {interaction*apply*pop-segment*report-interaction
   (state <s> ^name interaction
              ^operator <o>
              ^io.output-link <out>
              ^topstate.interaction.changes <c>)
   (<o> ^name pop-segment
        ^segment.next <next>)
   (<next> ^id <> 0
           ^info <info>
           ^purpose.type <seg-type>)
-->
   (<c> ^report-interaction <rep>)
   (<rep> ^type <seg-type>
          ^context <info>)
}