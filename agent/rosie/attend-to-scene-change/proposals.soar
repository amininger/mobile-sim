###############################################################################
#
# Proposal rules for attend-to-scene-change within an substate
#
###############################################################################

# attend-to-all-scene-changes
#    If true, will attend to any changes in the scene
#
sp {anystate*propose*attend-to-scene-change*attend-to-all-scene-changes
   (state <s> ^attend-to-all-scene-changes true
              ^topstate.scene-monitor.scene-changes <sc>)
   (<sc> ^change <c>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name attend-to-scene-change
        ^change <c>)
}

sp {anystate*elaborate*attend-to-scene-change*low*priority
   (state <s> ^attend-to-all-scene-changes true
              ^operator <o> +
             -^attend-to-object-id <id>)
   (<o> ^name attend-to-scene-change
        ^change.object.monitor-id <id>)
-->
   (<o> ^attention-priority low)
}

sp {anystate*elaborate*attend-to-scene-change*high*priority
   (state <s> ^attend-to-all-scene-changes true
              ^operator <o> +
              ^attend-to-object-id <id>)
   (<o> ^name attend-to-scene-change
        ^change.object.monitor-id <id>)
-->
   (<o> ^attention-priority high)
}


################################################################################
#
# Proposal rules for operators within attend-to-scene-change
#   to take care of a specific change
#
################################################################################

sp {attend-to-scene-change*propose*attend-to-change
   (state <s> ^name attend-to-scene-change
              ^scene-change <change>
              ^topstate.scene-monitor.scene-changes.change-info.change <c>)
   (<change> ^type <change-type>)
   (<c> ^name <change-type>
        ^op-name <op-name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name <op-name>
        ^change-type <change-type>)
}

sp {attend-to-scene-change*elaborate*attend-to-change*info
   (state <s> ^name attend-to-scene-change
              ^operator <o> +
              ^scene-change.{<att> <> type} <val>)
   (<o> ^change-type <type>)
-->
   (<o> ^<att> <val>)
}


#### TODO: 

###############################################################################
# 
# Propose attend-to-scene-change
#   This can get proposed on any state if the correct flags are given
# 
# Valid Flags:
#   attend-to-all-scene-changes true - any scene change will be attended to
#   attend-to-create-delete-only true - only changes involving new/stale objects will be attended to
#   attend-to-properties-only true - only changes involving properties will be attended to
#   attend-to-object <id> - only changes involving the specified object will be attended to
#   attend-to-property-type <name> - only property changes involving the given property will be attended to
#
################################################################################

sp {anystate*apply*attend-to-scene-change*debug-perception*report-change*belief
   (state <s> ^operator <o>
              ^topstate.agent-params.debug-perception true)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type <type>
        ^object.belief-obj.id <id>)
-->
   (write |Change | <type> | on belief object | <id> (crlf))
}

sp {anystate*apply*attend-to-scene-change*debug-perception*report-change*perception
   (state <s> ^operator <o>
              ^topstate.agent-params.debug-perception true)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type <type>
        ^object <obj>)
   (<obj> ^perception-obj.id <id>
         -^belief-obj)
-->
   (write |Change | <type> | on perception object | <id> (crlf))
}




## attend-to-create-delete-only
##   If true, will only attend to new-object/stale-object
#
#sp {anystate*propose*attend-to-scene-change*attend-to-create-delete-only
#   (state <s> ^attend-to-create-delete-only true
#              ^topstate.scene-monitor.scene-changes <sc>)
#   (<sc> ^change <c>)
#   (<c> ^type << new-object stale-object stability-timer-satisfied unidentified-object >>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name attend-to-scene-change
#        ^change <c>)
#}
#
## attend-to-properties-only
##   If true, will only attend to changes in properties
#
#sp {anystate*propose*attend-to-scene-change*attend-to-properties-only
#   (state <s> ^attend-to-properties-only true
#              ^topstate.scene-monitor.scene-changes <sc>)
#   (<sc> ^change <c>)
#   (<c> ^type << changed-property higher-confidence different-best >>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name attend-to-scene-change
#        ^change <c>)
#}
#
## attend-to-object
##   Will only attend to changes relevant to the object with the specified id
#
#sp {anystate*propose*attend-to-scene-change*attend-to-object
#   (state <s> ^attend-to-object <id>
#              ^topstate.scene-monitor.scene-changes <sc>)
#   (<sc> ^change <c>)
#   (<c> ^object.wm-obj.id <id>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name attend-to-scene-change
#        ^change <c>)
#}
#
#sp {anystate*reject*attend-to-scene-change*no*object*match
#   (state <s> ^operator <o> +
#              ^attend-to-object <any>
#             -^attend-to-object <id>)
#   (<o> ^name attend-to-scene-change
#        ^change.object.wm-obj.id <id>)
#-->
#   (<s> ^operator <o> -)
#}
#
## attend-to-property-type
##   Will only attend to changes relevant to the property listed
#
#sp {anystate*propose*attend-to-scene-change*attend-to-property-type
#   (state <s> ^attend-to-property-type <prop-name>
#              ^topstate.scene-monitor.scene-changes <sc>)
#   (<sc> ^change <c>)
#   (<c> ^property.name <prop-name>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name attend-to-scene-change
#        ^change <c>)
#}
#
#sp {anystate*reject*attend-to-scene-change*no*property*match
#   (state <s> ^operator <o> +
#              ^attend-to-property-type <any>
#             -^attend-to-property-type <prop-name>)
#   (<o> ^name attend-to-scene-change
#        ^change.property.name <prop-name>)
#-->
#   (<s> ^operator <o> -)
#}
