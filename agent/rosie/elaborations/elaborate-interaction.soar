sp {interaction-stack*elaborate*segments*all*segments
   (state <s> ^topstate <s>
              ^interaction.stack.segments <segs>)
   (<segs> ^segment.prev <seg>)
-->
   (<segs> ^segment <seg>)
}


####
# linguistic-desc
#   Elaborate all indexable objects on the stack with a lexical description
####
sp {interaction-stack*elaborate*indexable*object*outgoing-desc
   (state <s> ^topstate <s>
              ^interaction.stack.segments.segment.info.<indexable> <i>)
   (<i> ^type object)
-->
   (<i> ^outgoing-desc <desc>)
}

sp {interaction-stack*elaborate*info*indexable*object*adjective
   (state <s> ^topstate <s>
              ^interaction.stack.segments.segment.info.<indexable> <i>)
   (<i> ^type object
        ^indexable <i2>
        ^outgoing-desc <desc>)
   (<i2> ^type word
         ^result <res>)
   (<res> ^word <adj>
          ^sense.property.type <> generic)
   (<desc> -^word <adj>)
-->
   (<desc> ^adjective <adj>)
}

sp {interaction-stack*elaborate*info*indexable*object*default*word*object
   (state <s> ^topstate <s>
              ^interaction.stack.segments.segment.info.<indexable> <i>)
   (<i> ^type object
        ^outgoing-desc <desc>)
   (<desc> -^word <> object)
-->
   (<desc> ^word object)
}

sp {interaction-stack*elaborate*info*indexable*object*name
   (state <s> ^topstate <s>
              ^interaction.stack.segments.segment.info.<indexable> <i>)
   (<i> ^type object
        ^indexable <i2>
        ^outgoing-desc <desc>)
   (<i2> ^type word
         ^result <res>)
   (<res> ^word <name>
          ^sense.property.type name)
-->
   (<desc> ^word <name>)
}

sp {interaction-stack*elaborate*info*indexable*object*shape*name
   (state <s> ^topstate <s>
              ^interaction.stack.segments.segment.info.<indexable> <i>)
   (<i> ^type object
        ^indexable <i2>
       -^indexable.result.sense.property.type name
        ^outgoing-desc <desc>)
   (<i2> ^type word
         ^result <res>)
   (<res> ^word <word>
          ^sense.property.type shape)
-->
   (<desc> ^word <word>)
}



#####
# referents : things being referred to that are on the stack
#####
sp {interaction-stack*elaborate*referents
   (state <s> ^topstate <s>
              ^interaction <int>)
-->
   (<int> ^referents <refs>)
   (<refs> ^objects <objs>)
}

sp {interaction-stack*elaborate*objects*depth*1
   (state <s> ^topstate <s>
              ^interaction <int>)
   (<int> ^stack.segments.segment <seg>
          ^referents.objects <objs>
         -^stack.segment <seg>)
   (<seg> ^purpose.parameters.indexable <i>)
   (<i> ^type object
        ^result <res>)
-->
   (<objs> ^object <res>)
}

sp {interaction-stack*elaborate*objects*depth*2
   (state <s> ^topstate <s>
              ^interaction <int>)
   (<int> ^stack.segments.segment <seg>
          ^referents.objects <objs>
         -^stack.segment <seg>)
   (<seg> ^purpose.parameters.indexable.<att> <i>)
   (<i> ^type object
        ^lexical
        ^result <res>)
-->
   (<objs> ^object <res>)
}

sp {interaction-stack*elaborate*objects*pp-object
   (state <s> ^topstate <s>
              ^interaction <int>)
   (<int> ^stack.segments.segment <seg>
          ^referents.objects <objs>
         -^stack.segment <seg>)
   (<seg> ^purpose.parameters.indexable.pp-object.object <i>)
   (<i> ^type object
        ^lexical
        ^result <res>)
-->
   (<objs> ^object <res>)
}



####
# Special rules used to report more information when a segment pops
####
sp {interaction-stack*elaborate*teaching-request*info*object
   (state <s> ^topstate <s>
              ^interaction.stack.segments.segment <seg>)
   (<seg> ^info <info>
          ^purpose <purp>)
   (<purp> ^type << teaching-request which-question >>
           ^target-object <out>)
-->
   (<info> ^object <out>)
}

sp {interaction-stack*elaborate*ask-property-name*info*word
   (state <s> ^topstate <s>
              ^interaction.stack.segments.segment <seg>)
   (<seg> ^info <info>
          ^purpose <purp>)
   (<purp> ^type ask-property-name
           ^word <word>)
-->
   (<info> ^word <word>)
}