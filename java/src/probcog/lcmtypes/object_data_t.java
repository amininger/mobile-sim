/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package probcog.lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class object_data_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int id;
    public int num_cat;
    public probcog.lcmtypes.categorized_data_t cat_dat[];
    public double pos[];
    public int num_states;
    public String state_values[];
    public double bbox_dim[];
    public double bbox_xyzrpy[];
 
    public object_data_t()
    {
        pos = new double[6];
        bbox_dim = new double[3];
        bbox_xyzrpy = new double[6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x595d5aae091579b1L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(probcog.lcmtypes.object_data_t.class))
            return 0L;
 
        classes.add(probcog.lcmtypes.object_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + probcog.lcmtypes.categorized_data_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.id); 
 
        outs.writeInt(this.num_cat); 
 
        for (int a = 0; a < this.num_cat; a++) {
            this.cat_dat[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.pos[a]); 
        }
 
        outs.writeInt(this.num_states); 
 
        for (int a = 0; a < this.num_states; a++) {
            __strbuf = new char[this.state_values[a].length()]; this.state_values[a].getChars(0, this.state_values[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.bbox_dim[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.bbox_xyzrpy[a]); 
        }
 
    }
 
    public object_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public object_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static probcog.lcmtypes.object_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        probcog.lcmtypes.object_data_t o = new probcog.lcmtypes.object_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.id = ins.readInt();
 
        this.num_cat = ins.readInt();
 
        this.cat_dat = new probcog.lcmtypes.categorized_data_t[(int) num_cat];
        for (int a = 0; a < this.num_cat; a++) {
            this.cat_dat[a] = probcog.lcmtypes.categorized_data_t._decodeRecursiveFactory(ins);
        }
 
        this.pos = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pos[a] = ins.readDouble();
        }
 
        this.num_states = ins.readInt();
 
        this.state_values = new String[(int) num_states];
        for (int a = 0; a < this.num_states; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.state_values[a] = new String(__strbuf);
        }
 
        this.bbox_dim = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.bbox_dim[a] = ins.readDouble();
        }
 
        this.bbox_xyzrpy = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.bbox_xyzrpy[a] = ins.readDouble();
        }
 
    }
 
    public probcog.lcmtypes.object_data_t copy()
    {
        probcog.lcmtypes.object_data_t outobj = new probcog.lcmtypes.object_data_t();
        outobj.utime = this.utime;
 
        outobj.id = this.id;
 
        outobj.num_cat = this.num_cat;
 
        outobj.cat_dat = new probcog.lcmtypes.categorized_data_t[(int) num_cat];
        for (int a = 0; a < this.num_cat; a++) {
            outobj.cat_dat[a] = this.cat_dat[a].copy();
        }
 
        outobj.pos = new double[(int) 6];
        System.arraycopy(this.pos, 0, outobj.pos, 0, 6); 
        outobj.num_states = this.num_states;
 
        outobj.state_values = new String[(int) num_states];
        if (this.num_states > 0)
            System.arraycopy(this.state_values, 0, outobj.state_values, 0, this.num_states); 
        outobj.bbox_dim = new double[(int) 3];
        System.arraycopy(this.bbox_dim, 0, outobj.bbox_dim, 0, 3); 
        outobj.bbox_xyzrpy = new double[(int) 6];
        System.arraycopy(this.bbox_xyzrpy, 0, outobj.bbox_xyzrpy, 0, 6); 
        return outobj;
    }
 
}

