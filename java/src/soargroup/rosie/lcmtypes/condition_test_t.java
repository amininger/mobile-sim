/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package soargroup.rosie.lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class condition_test_t implements lcm.lcm.LCMEncodable
{
    public String name;
    public int num_params;
    public String param_names[];
    public soargroup.rosie.lcmtypes.typed_value_t param_values[];
    public int compare_type;
    public soargroup.rosie.lcmtypes.typed_value_t compared_value;
 
    public condition_test_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x66800932ce76a160L;
 
    public static final int CMP_GT = 1;
    public static final int CMP_GTE = 2;
    public static final int CMP_EQ = 3;
    public static final int CMP_LTE = 4;
    public static final int CMP_LT = 5;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(soargroup.rosie.lcmtypes.condition_test_t.class))
            return 0L;
 
        classes.add(soargroup.rosie.lcmtypes.condition_test_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + soargroup.rosie.lcmtypes.typed_value_t._hashRecursive(classes)
             + soargroup.rosie.lcmtypes.typed_value_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[this.name.length()]; this.name.getChars(0, this.name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.num_params); 
 
        for (int a = 0; a < this.num_params; a++) {
            __strbuf = new char[this.param_names[a].length()]; this.param_names[a].getChars(0, this.param_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.num_params; a++) {
            this.param_values[a]._encodeRecursive(outs); 
        }
 
        outs.writeInt(this.compare_type); 
 
        this.compared_value._encodeRecursive(outs); 
 
    }
 
    public condition_test_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public condition_test_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static soargroup.rosie.lcmtypes.condition_test_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        soargroup.rosie.lcmtypes.condition_test_t o = new soargroup.rosie.lcmtypes.condition_test_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.name = new String(__strbuf);
 
        this.num_params = ins.readInt();
 
        this.param_names = new String[(int) num_params];
        for (int a = 0; a < this.num_params; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.param_names[a] = new String(__strbuf);
        }
 
        this.param_values = new soargroup.rosie.lcmtypes.typed_value_t[(int) num_params];
        for (int a = 0; a < this.num_params; a++) {
            this.param_values[a] = soargroup.rosie.lcmtypes.typed_value_t._decodeRecursiveFactory(ins);
        }
 
        this.compare_type = ins.readInt();
 
        this.compared_value = soargroup.rosie.lcmtypes.typed_value_t._decodeRecursiveFactory(ins);
 
    }
 
    public soargroup.rosie.lcmtypes.condition_test_t copy()
    {
        soargroup.rosie.lcmtypes.condition_test_t outobj = new soargroup.rosie.lcmtypes.condition_test_t();
        outobj.name = this.name;
 
        outobj.num_params = this.num_params;
 
        outobj.param_names = new String[(int) num_params];
        if (this.num_params > 0)
            System.arraycopy(this.param_names, 0, outobj.param_names, 0, this.num_params); 
        outobj.param_values = new soargroup.rosie.lcmtypes.typed_value_t[(int) num_params];
        for (int a = 0; a < this.num_params; a++) {
            outobj.param_values[a] = this.param_values[a].copy();
        }
 
        outobj.compare_type = this.compare_type;
 
        outobj.compared_value = this.compared_value.copy();
 
        return outobj;
    }
 
}

