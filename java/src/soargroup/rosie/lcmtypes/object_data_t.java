/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package soargroup.rosie.lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class object_data_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String id;
    public double xyzrpy[];
    public double lenxyz[];
    public int num_classifications;
    public soargroup.rosie.lcmtypes.classification_t classifications[];
 
    public object_data_t()
    {
        xyzrpy = new double[6];
        lenxyz = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc3d8e0e4a4833014L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(soargroup.rosie.lcmtypes.object_data_t.class))
            return 0L;
 
        classes.add(soargroup.rosie.lcmtypes.object_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + soargroup.rosie.lcmtypes.classification_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.id.length()]; this.id.getChars(0, this.id.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.xyzrpy[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.lenxyz[a]); 
        }
 
        outs.writeInt(this.num_classifications); 
 
        for (int a = 0; a < this.num_classifications; a++) {
            this.classifications[a]._encodeRecursive(outs); 
        }
 
    }
 
    public object_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public object_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static soargroup.rosie.lcmtypes.object_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        soargroup.rosie.lcmtypes.object_data_t o = new soargroup.rosie.lcmtypes.object_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.id = new String(__strbuf);
 
        this.xyzrpy = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.xyzrpy[a] = ins.readDouble();
        }
 
        this.lenxyz = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.lenxyz[a] = ins.readDouble();
        }
 
        this.num_classifications = ins.readInt();
 
        this.classifications = new soargroup.rosie.lcmtypes.classification_t[(int) num_classifications];
        for (int a = 0; a < this.num_classifications; a++) {
            this.classifications[a] = soargroup.rosie.lcmtypes.classification_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public soargroup.rosie.lcmtypes.object_data_t copy()
    {
        soargroup.rosie.lcmtypes.object_data_t outobj = new soargroup.rosie.lcmtypes.object_data_t();
        outobj.utime = this.utime;
 
        outobj.id = this.id;
 
        outobj.xyzrpy = new double[(int) 6];
        System.arraycopy(this.xyzrpy, 0, outobj.xyzrpy, 0, 6); 
        outobj.lenxyz = new double[(int) 3];
        System.arraycopy(this.lenxyz, 0, outobj.lenxyz, 0, 3); 
        outobj.num_classifications = this.num_classifications;
 
        outobj.classifications = new soargroup.rosie.lcmtypes.classification_t[(int) num_classifications];
        for (int a = 0; a < this.num_classifications; a++) {
            outobj.classifications[a] = this.classifications[a].copy();
        }
 
        return outobj;
    }
 
}

